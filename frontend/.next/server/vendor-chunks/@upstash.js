"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@upstash";
exports.ids = ["vendor-chunks/@upstash"];
exports.modules = {

/***/ "(rsc)/./node_modules/@upstash/redis/chunk-56TVFNIH.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@upstash/redis/chunk-56TVFNIH.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpClient: () => (/* binding */ HttpClient),\n/* harmony export */   Redis: () => (/* binding */ Redis),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   error_exports: () => (/* binding */ error_exports)\n/* harmony export */ });\n/* harmony import */ var crypto_js_enc_hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js/enc-hex.js */ \"(rsc)/./node_modules/crypto-js/enc-hex.js\");\n/* harmony import */ var crypto_js_sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-js/sha1.js */ \"(rsc)/./node_modules/crypto-js/sha1.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// pkg/error.ts\nvar error_exports = {};\n__export(error_exports, {\n  UpstashError: () => UpstashError,\n  UrlError: () => UrlError\n});\nvar UpstashError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"UpstashError\";\n  }\n};\nvar UrlError = class extends Error {\n  constructor(url) {\n    super(\n      `Upstash Redis client was passed an invalid URL. You should pass a URL starting with https. Received: \"${url}\". `\n    );\n    this.name = \"UrlError\";\n  }\n};\n\n// pkg/util.ts\nfunction parseRecursive(obj) {\n  const parsed = Array.isArray(obj) ? obj.map((o) => {\n    try {\n      return parseRecursive(o);\n    } catch {\n      return o;\n    }\n  }) : JSON.parse(obj);\n  if (typeof parsed === \"number\" && parsed.toString() !== obj) {\n    return obj;\n  }\n  return parsed;\n}\nfunction parseResponse(result) {\n  try {\n    return parseRecursive(result);\n  } catch {\n    return result;\n  }\n}\nfunction deserializeScanResponse(result) {\n  return [result[0], ...parseResponse(result.slice(1))];\n}\nfunction mergeHeaders(...headers) {\n  const merged = {};\n  for (const header of headers) {\n    if (!header) continue;\n    for (const [key, value] of Object.entries(header)) {\n      if (value !== void 0 && value !== null) {\n        merged[key] = value;\n      }\n    }\n  }\n  return merged;\n}\n\n// pkg/http.ts\nvar HttpClient = class {\n  baseUrl;\n  headers;\n  options;\n  readYourWrites;\n  upstashSyncToken = \"\";\n  hasCredentials;\n  retry;\n  constructor(config) {\n    this.options = {\n      backend: config.options?.backend,\n      agent: config.agent,\n      responseEncoding: config.responseEncoding ?? \"base64\",\n      // default to base64\n      cache: config.cache,\n      signal: config.signal,\n      keepAlive: config.keepAlive ?? true\n    };\n    this.upstashSyncToken = \"\";\n    this.readYourWrites = config.readYourWrites ?? true;\n    this.baseUrl = (config.baseUrl || \"\").replace(/\\/$/, \"\");\n    const urlRegex = /^https?:\\/\\/[^\\s#$./?].\\S*$/;\n    if (this.baseUrl && !urlRegex.test(this.baseUrl)) {\n      throw new UrlError(this.baseUrl);\n    }\n    this.headers = {\n      \"Content-Type\": \"application/json\",\n      ...config.headers\n    };\n    this.hasCredentials = Boolean(this.baseUrl && this.headers.authorization.split(\" \")[1]);\n    if (this.options.responseEncoding === \"base64\") {\n      this.headers[\"Upstash-Encoding\"] = \"base64\";\n    }\n    this.retry = typeof config.retry === \"boolean\" && !config.retry ? {\n      attempts: 1,\n      backoff: () => 0\n    } : {\n      attempts: config.retry?.retries ?? 5,\n      backoff: config.retry?.backoff ?? ((retryCount) => Math.exp(retryCount) * 50)\n    };\n  }\n  mergeTelemetry(telemetry) {\n    this.headers = merge(this.headers, \"Upstash-Telemetry-Runtime\", telemetry.runtime);\n    this.headers = merge(this.headers, \"Upstash-Telemetry-Platform\", telemetry.platform);\n    this.headers = merge(this.headers, \"Upstash-Telemetry-Sdk\", telemetry.sdk);\n  }\n  async request(req) {\n    const requestHeaders = mergeHeaders(this.headers, req.headers ?? {});\n    const requestUrl = [this.baseUrl, ...req.path ?? []].join(\"/\");\n    const isEventStream = requestHeaders.Accept === \"text/event-stream\";\n    const requestOptions = {\n      //@ts-expect-error this should throw due to bun regression\n      cache: this.options.cache,\n      method: \"POST\",\n      headers: requestHeaders,\n      body: JSON.stringify(req.body),\n      keepalive: this.options.keepAlive,\n      agent: this.options.agent,\n      signal: req.signal ?? this.options.signal,\n      /**\n       * Fastly specific\n       */\n      backend: this.options.backend\n    };\n    if (!this.hasCredentials) {\n      console.warn(\n        \"[Upstash Redis] Redis client was initialized without url or token. Failed to execute command.\"\n      );\n    }\n    if (this.readYourWrites) {\n      const newHeader = this.upstashSyncToken;\n      this.headers[\"upstash-sync-token\"] = newHeader;\n    }\n    let res = null;\n    let error = null;\n    for (let i = 0; i <= this.retry.attempts; i++) {\n      try {\n        res = await fetch(requestUrl, requestOptions);\n        break;\n      } catch (error_) {\n        if (this.options.signal?.aborted) {\n          const myBlob = new Blob([\n            JSON.stringify({ result: this.options.signal.reason ?? \"Aborted\" })\n          ]);\n          const myOptions = {\n            status: 200,\n            statusText: this.options.signal.reason ?? \"Aborted\"\n          };\n          res = new Response(myBlob, myOptions);\n          break;\n        }\n        error = error_;\n        if (i < this.retry.attempts) {\n          await new Promise((r) => setTimeout(r, this.retry.backoff(i)));\n        }\n      }\n    }\n    if (!res) {\n      throw error ?? new Error(\"Exhausted all retries\");\n    }\n    if (!res.ok) {\n      const body2 = await res.json();\n      throw new UpstashError(`${body2.error}, command was: ${JSON.stringify(req.body)}`);\n    }\n    if (this.readYourWrites) {\n      const headers = res.headers;\n      this.upstashSyncToken = headers.get(\"upstash-sync-token\") ?? \"\";\n    }\n    if (isEventStream && req && req.onMessage && res.body) {\n      const reader = res.body.getReader();\n      const decoder = new TextDecoder();\n      (async () => {\n        try {\n          while (true) {\n            const { value, done } = await reader.read();\n            if (done) break;\n            const chunk = decoder.decode(value);\n            const lines = chunk.split(\"\\n\");\n            for (const line of lines) {\n              if (line.startsWith(\"data: \")) {\n                const data = line.slice(6);\n                req.onMessage?.(data);\n              }\n            }\n          }\n        } catch (error2) {\n          if (error2 instanceof Error && error2.name === \"AbortError\") {\n          } else {\n            console.error(\"Stream reading error:\", error2);\n          }\n        } finally {\n          try {\n            await reader.cancel();\n          } catch {\n          }\n        }\n      })();\n      return { result: 1 };\n    }\n    const body = await res.json();\n    if (this.readYourWrites) {\n      const headers = res.headers;\n      this.upstashSyncToken = headers.get(\"upstash-sync-token\") ?? \"\";\n    }\n    if (this.options.responseEncoding === \"base64\") {\n      if (Array.isArray(body)) {\n        return body.map(({ result: result2, error: error2 }) => ({\n          result: decode(result2),\n          error: error2\n        }));\n      }\n      const result = decode(body.result);\n      return { result, error: body.error };\n    }\n    return body;\n  }\n};\nfunction base64decode(b64) {\n  let dec = \"\";\n  try {\n    const binString = atob(b64);\n    const size = binString.length;\n    const bytes = new Uint8Array(size);\n    for (let i = 0; i < size; i++) {\n      bytes[i] = binString.charCodeAt(i);\n    }\n    dec = new TextDecoder().decode(bytes);\n  } catch {\n    dec = b64;\n  }\n  return dec;\n}\nfunction decode(raw) {\n  let result = void 0;\n  switch (typeof raw) {\n    case \"undefined\": {\n      return raw;\n    }\n    case \"number\": {\n      result = raw;\n      break;\n    }\n    case \"object\": {\n      if (Array.isArray(raw)) {\n        result = raw.map(\n          (v) => typeof v === \"string\" ? base64decode(v) : Array.isArray(v) ? v.map((element) => decode(element)) : v\n        );\n      } else {\n        result = null;\n      }\n      break;\n    }\n    case \"string\": {\n      result = raw === \"OK\" ? \"OK\" : base64decode(raw);\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n  return result;\n}\nfunction merge(obj, key, value) {\n  if (!value) {\n    return obj;\n  }\n  obj[key] = obj[key] ? [obj[key], value].join(\",\") : value;\n  return obj;\n}\n\n// pkg/commands/command.ts\nvar defaultSerializer = (c) => {\n  switch (typeof c) {\n    case \"string\":\n    case \"number\":\n    case \"boolean\": {\n      return c;\n    }\n    default: {\n      return JSON.stringify(c);\n    }\n  }\n};\nvar Command = class {\n  command;\n  serialize;\n  deserialize;\n  headers;\n  path;\n  onMessage;\n  isStreaming;\n  signal;\n  /**\n   * Create a new command instance.\n   *\n   * You can define a custom `deserialize` function. By default we try to deserialize as json.\n   */\n  constructor(command, opts) {\n    this.serialize = defaultSerializer;\n    this.deserialize = opts?.automaticDeserialization === void 0 || opts.automaticDeserialization ? opts?.deserialize ?? parseResponse : (x) => x;\n    this.command = command.map((c) => this.serialize(c));\n    this.headers = opts?.headers;\n    this.path = opts?.path;\n    this.onMessage = opts?.streamOptions?.onMessage;\n    this.isStreaming = opts?.streamOptions?.isStreaming ?? false;\n    this.signal = opts?.streamOptions?.signal;\n    if (opts?.latencyLogging) {\n      const originalExec = this.exec.bind(this);\n      this.exec = async (client) => {\n        const start = performance.now();\n        const result = await originalExec(client);\n        const end = performance.now();\n        const loggerResult = (end - start).toFixed(2);\n        console.log(\n          `Latency for \\x1B[38;2;19;185;39m${this.command[0].toString().toUpperCase()}\\x1B[0m: \\x1B[38;2;0;255;255m${loggerResult} ms\\x1B[0m`\n        );\n        return result;\n      };\n    }\n  }\n  /**\n   * Execute the command using a client.\n   */\n  async exec(client) {\n    const { result, error } = await client.request({\n      body: this.command,\n      path: this.path,\n      upstashSyncToken: client.upstashSyncToken,\n      headers: this.headers,\n      onMessage: this.onMessage,\n      isStreaming: this.isStreaming,\n      signal: this.signal\n    });\n    if (error) {\n      throw new UpstashError(error);\n    }\n    if (result === void 0) {\n      throw new TypeError(\"Request did not return a result\");\n    }\n    return this.deserialize(result);\n  }\n};\n\n// pkg/commands/hrandfield.ts\nfunction deserialize(result) {\n  if (result.length === 0) {\n    return null;\n  }\n  const obj = {};\n  for (let i = 0; i < result.length; i += 2) {\n    const key = result[i];\n    const value = result[i + 1];\n    try {\n      obj[key] = JSON.parse(value);\n    } catch {\n      obj[key] = value;\n    }\n  }\n  return obj;\n}\nvar HRandFieldCommand = class extends Command {\n  constructor(cmd, opts) {\n    const command = [\"hrandfield\", cmd[0]];\n    if (typeof cmd[1] === \"number\") {\n      command.push(cmd[1]);\n    }\n    if (cmd[2]) {\n      command.push(\"WITHVALUES\");\n    }\n    super(command, {\n      // @ts-expect-error to silence compiler\n      deserialize: cmd[2] ? (result) => deserialize(result) : opts?.deserialize,\n      ...opts\n    });\n  }\n};\n\n// pkg/commands/append.ts\nvar AppendCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"append\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/bitcount.ts\nvar BitCountCommand = class extends Command {\n  constructor([key, start, end], opts) {\n    const command = [\"bitcount\", key];\n    if (typeof start === \"number\") {\n      command.push(start);\n    }\n    if (typeof end === \"number\") {\n      command.push(end);\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/bitfield.ts\nvar BitFieldCommand = class {\n  constructor(args, client, opts, execOperation = (command) => command.exec(this.client)) {\n    this.client = client;\n    this.opts = opts;\n    this.execOperation = execOperation;\n    this.command = [\"bitfield\", ...args];\n  }\n  command;\n  chain(...args) {\n    this.command.push(...args);\n    return this;\n  }\n  get(...args) {\n    return this.chain(\"get\", ...args);\n  }\n  set(...args) {\n    return this.chain(\"set\", ...args);\n  }\n  incrby(...args) {\n    return this.chain(\"incrby\", ...args);\n  }\n  overflow(overflow) {\n    return this.chain(\"overflow\", overflow);\n  }\n  exec() {\n    const command = new Command(this.command, this.opts);\n    return this.execOperation(command);\n  }\n};\n\n// pkg/commands/bitop.ts\nvar BitOpCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"bitop\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/bitpos.ts\nvar BitPosCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"bitpos\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/copy.ts\nvar CopyCommand = class extends Command {\n  constructor([key, destinationKey, opts], commandOptions) {\n    super([\"COPY\", key, destinationKey, ...opts?.replace ? [\"REPLACE\"] : []], {\n      ...commandOptions,\n      deserialize(result) {\n        if (result > 0) {\n          return \"COPIED\";\n        }\n        return \"NOT_COPIED\";\n      }\n    });\n  }\n};\n\n// pkg/commands/dbsize.ts\nvar DBSizeCommand = class extends Command {\n  constructor(opts) {\n    super([\"dbsize\"], opts);\n  }\n};\n\n// pkg/commands/decr.ts\nvar DecrCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"decr\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/decrby.ts\nvar DecrByCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"decrby\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/del.ts\nvar DelCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"del\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/echo.ts\nvar EchoCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"echo\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/eval.ts\nvar EvalCommand = class extends Command {\n  constructor([script, keys, args], opts) {\n    super([\"eval\", script, keys.length, ...keys, ...args ?? []], opts);\n  }\n};\n\n// pkg/commands/evalsha.ts\nvar EvalshaCommand = class extends Command {\n  constructor([sha, keys, args], opts) {\n    super([\"evalsha\", sha, keys.length, ...keys, ...args ?? []], opts);\n  }\n};\n\n// pkg/commands/exec.ts\nvar ExecCommand = class extends Command {\n  constructor(cmd, opts) {\n    const normalizedCmd = cmd.map((arg) => typeof arg === \"string\" ? arg : String(arg));\n    super(normalizedCmd, opts);\n  }\n};\n\n// pkg/commands/exists.ts\nvar ExistsCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"exists\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/expire.ts\nvar ExpireCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"expire\", ...cmd.filter(Boolean)], opts);\n  }\n};\n\n// pkg/commands/expireat.ts\nvar ExpireAtCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"expireat\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/flushall.ts\nvar FlushAllCommand = class extends Command {\n  constructor(args, opts) {\n    const command = [\"flushall\"];\n    if (args && args.length > 0 && args[0].async) {\n      command.push(\"async\");\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/flushdb.ts\nvar FlushDBCommand = class extends Command {\n  constructor([opts], cmdOpts) {\n    const command = [\"flushdb\"];\n    if (opts?.async) {\n      command.push(\"async\");\n    }\n    super(command, cmdOpts);\n  }\n};\n\n// pkg/commands/geo_add.ts\nvar GeoAddCommand = class extends Command {\n  constructor([key, arg1, ...arg2], opts) {\n    const command = [\"geoadd\", key];\n    if (\"nx\" in arg1 && arg1.nx) {\n      command.push(\"nx\");\n    } else if (\"xx\" in arg1 && arg1.xx) {\n      command.push(\"xx\");\n    }\n    if (\"ch\" in arg1 && arg1.ch) {\n      command.push(\"ch\");\n    }\n    if (\"latitude\" in arg1 && arg1.latitude) {\n      command.push(arg1.longitude, arg1.latitude, arg1.member);\n    }\n    command.push(\n      ...arg2.flatMap(({ latitude, longitude, member }) => [longitude, latitude, member])\n    );\n    super(command, opts);\n  }\n};\n\n// pkg/commands/geo_dist.ts\nvar GeoDistCommand = class extends Command {\n  constructor([key, member1, member2, unit = \"M\"], opts) {\n    super([\"GEODIST\", key, member1, member2, unit], opts);\n  }\n};\n\n// pkg/commands/geo_hash.ts\nvar GeoHashCommand = class extends Command {\n  constructor(cmd, opts) {\n    const [key] = cmd;\n    const members = Array.isArray(cmd[1]) ? cmd[1] : cmd.slice(1);\n    super([\"GEOHASH\", key, ...members], opts);\n  }\n};\n\n// pkg/commands/geo_pos.ts\nvar GeoPosCommand = class extends Command {\n  constructor(cmd, opts) {\n    const [key] = cmd;\n    const members = Array.isArray(cmd[1]) ? cmd[1] : cmd.slice(1);\n    super([\"GEOPOS\", key, ...members], {\n      deserialize: (result) => transform(result),\n      ...opts\n    });\n  }\n};\nfunction transform(result) {\n  const final = [];\n  for (const pos of result) {\n    if (!pos?.[0] || !pos?.[1]) {\n      continue;\n    }\n    final.push({ lng: Number.parseFloat(pos[0]), lat: Number.parseFloat(pos[1]) });\n  }\n  return final;\n}\n\n// pkg/commands/geo_search.ts\nvar GeoSearchCommand = class extends Command {\n  constructor([key, centerPoint, shape, order, opts], commandOptions) {\n    const command = [\"GEOSEARCH\", key];\n    if (centerPoint.type === \"FROMMEMBER\" || centerPoint.type === \"frommember\") {\n      command.push(centerPoint.type, centerPoint.member);\n    }\n    if (centerPoint.type === \"FROMLONLAT\" || centerPoint.type === \"fromlonlat\") {\n      command.push(centerPoint.type, centerPoint.coordinate.lon, centerPoint.coordinate.lat);\n    }\n    if (shape.type === \"BYRADIUS\" || shape.type === \"byradius\") {\n      command.push(shape.type, shape.radius, shape.radiusType);\n    }\n    if (shape.type === \"BYBOX\" || shape.type === \"bybox\") {\n      command.push(shape.type, shape.rect.width, shape.rect.height, shape.rectType);\n    }\n    command.push(order);\n    if (opts?.count) {\n      command.push(\"COUNT\", opts.count.limit, ...opts.count.any ? [\"ANY\"] : []);\n    }\n    const transform2 = (result) => {\n      if (!opts?.withCoord && !opts?.withDist && !opts?.withHash) {\n        return result.map((member) => {\n          try {\n            return { member: JSON.parse(member) };\n          } catch {\n            return { member };\n          }\n        });\n      }\n      return result.map((members) => {\n        let counter = 1;\n        const obj = {};\n        try {\n          obj.member = JSON.parse(members[0]);\n        } catch {\n          obj.member = members[0];\n        }\n        if (opts.withDist) {\n          obj.dist = Number.parseFloat(members[counter++]);\n        }\n        if (opts.withHash) {\n          obj.hash = members[counter++].toString();\n        }\n        if (opts.withCoord) {\n          obj.coord = {\n            long: Number.parseFloat(members[counter][0]),\n            lat: Number.parseFloat(members[counter][1])\n          };\n        }\n        return obj;\n      });\n    };\n    super(\n      [\n        ...command,\n        ...opts?.withCoord ? [\"WITHCOORD\"] : [],\n        ...opts?.withDist ? [\"WITHDIST\"] : [],\n        ...opts?.withHash ? [\"WITHHASH\"] : []\n      ],\n      {\n        deserialize: transform2,\n        ...commandOptions\n      }\n    );\n  }\n};\n\n// pkg/commands/geo_search_store.ts\nvar GeoSearchStoreCommand = class extends Command {\n  constructor([destination, key, centerPoint, shape, order, opts], commandOptions) {\n    const command = [\"GEOSEARCHSTORE\", destination, key];\n    if (centerPoint.type === \"FROMMEMBER\" || centerPoint.type === \"frommember\") {\n      command.push(centerPoint.type, centerPoint.member);\n    }\n    if (centerPoint.type === \"FROMLONLAT\" || centerPoint.type === \"fromlonlat\") {\n      command.push(centerPoint.type, centerPoint.coordinate.lon, centerPoint.coordinate.lat);\n    }\n    if (shape.type === \"BYRADIUS\" || shape.type === \"byradius\") {\n      command.push(shape.type, shape.radius, shape.radiusType);\n    }\n    if (shape.type === \"BYBOX\" || shape.type === \"bybox\") {\n      command.push(shape.type, shape.rect.width, shape.rect.height, shape.rectType);\n    }\n    command.push(order);\n    if (opts?.count) {\n      command.push(\"COUNT\", opts.count.limit, ...opts.count.any ? [\"ANY\"] : []);\n    }\n    super([...command, ...opts?.storeDist ? [\"STOREDIST\"] : []], commandOptions);\n  }\n};\n\n// pkg/commands/get.ts\nvar GetCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"get\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/getbit.ts\nvar GetBitCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"getbit\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/getdel.ts\nvar GetDelCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"getdel\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/getex.ts\nvar GetExCommand = class extends Command {\n  constructor([key, opts], cmdOpts) {\n    const command = [\"getex\", key];\n    if (opts) {\n      if (\"ex\" in opts && typeof opts.ex === \"number\") {\n        command.push(\"ex\", opts.ex);\n      } else if (\"px\" in opts && typeof opts.px === \"number\") {\n        command.push(\"px\", opts.px);\n      } else if (\"exat\" in opts && typeof opts.exat === \"number\") {\n        command.push(\"exat\", opts.exat);\n      } else if (\"pxat\" in opts && typeof opts.pxat === \"number\") {\n        command.push(\"pxat\", opts.pxat);\n      } else if (\"persist\" in opts && opts.persist) {\n        command.push(\"persist\");\n      }\n    }\n    super(command, cmdOpts);\n  }\n};\n\n// pkg/commands/getrange.ts\nvar GetRangeCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"getrange\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/getset.ts\nvar GetSetCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"getset\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hdel.ts\nvar HDelCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hdel\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hexists.ts\nvar HExistsCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hexists\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hget.ts\nvar HGetCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hget\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hgetall.ts\nfunction deserialize2(result) {\n  if (result.length === 0) {\n    return null;\n  }\n  const obj = {};\n  for (let i = 0; i < result.length; i += 2) {\n    const key = result[i];\n    const value = result[i + 1];\n    try {\n      const valueIsNumberAndNotSafeInteger = !Number.isNaN(Number(value)) && !Number.isSafeInteger(Number(value));\n      obj[key] = valueIsNumberAndNotSafeInteger ? value : JSON.parse(value);\n    } catch {\n      obj[key] = value;\n    }\n  }\n  return obj;\n}\nvar HGetAllCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hgetall\", ...cmd], {\n      deserialize: (result) => deserialize2(result),\n      ...opts\n    });\n  }\n};\n\n// pkg/commands/hincrby.ts\nvar HIncrByCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hincrby\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hincrbyfloat.ts\nvar HIncrByFloatCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hincrbyfloat\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hkeys.ts\nvar HKeysCommand = class extends Command {\n  constructor([key], opts) {\n    super([\"hkeys\", key], opts);\n  }\n};\n\n// pkg/commands/hlen.ts\nvar HLenCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hlen\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hmget.ts\nfunction deserialize3(fields, result) {\n  if (result.every((field) => field === null)) {\n    return null;\n  }\n  const obj = {};\n  for (const [i, field] of fields.entries()) {\n    try {\n      obj[field] = JSON.parse(result[i]);\n    } catch {\n      obj[field] = result[i];\n    }\n  }\n  return obj;\n}\nvar HMGetCommand = class extends Command {\n  constructor([key, ...fields], opts) {\n    super([\"hmget\", key, ...fields], {\n      deserialize: (result) => deserialize3(fields, result),\n      ...opts\n    });\n  }\n};\n\n// pkg/commands/hmset.ts\nvar HMSetCommand = class extends Command {\n  constructor([key, kv], opts) {\n    super([\"hmset\", key, ...Object.entries(kv).flatMap(([field, value]) => [field, value])], opts);\n  }\n};\n\n// pkg/commands/hscan.ts\nvar HScanCommand = class extends Command {\n  constructor([key, cursor, cmdOpts], opts) {\n    const command = [\"hscan\", key, cursor];\n    if (cmdOpts?.match) {\n      command.push(\"match\", cmdOpts.match);\n    }\n    if (typeof cmdOpts?.count === \"number\") {\n      command.push(\"count\", cmdOpts.count);\n    }\n    super(command, {\n      deserialize: deserializeScanResponse,\n      ...opts\n    });\n  }\n};\n\n// pkg/commands/hset.ts\nvar HSetCommand = class extends Command {\n  constructor([key, kv], opts) {\n    super([\"hset\", key, ...Object.entries(kv).flatMap(([field, value]) => [field, value])], opts);\n  }\n};\n\n// pkg/commands/hsetnx.ts\nvar HSetNXCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hsetnx\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hstrlen.ts\nvar HStrLenCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hstrlen\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/hvals.ts\nvar HValsCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"hvals\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/incr.ts\nvar IncrCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"incr\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/incrby.ts\nvar IncrByCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"incrby\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/incrbyfloat.ts\nvar IncrByFloatCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"incrbyfloat\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_arrappend.ts\nvar JsonArrAppendCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.ARRAPPEND\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_arrindex.ts\nvar JsonArrIndexCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.ARRINDEX\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_arrinsert.ts\nvar JsonArrInsertCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.ARRINSERT\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_arrlen.ts\nvar JsonArrLenCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.ARRLEN\", cmd[0], cmd[1] ?? \"$\"], opts);\n  }\n};\n\n// pkg/commands/json_arrpop.ts\nvar JsonArrPopCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.ARRPOP\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_arrtrim.ts\nvar JsonArrTrimCommand = class extends Command {\n  constructor(cmd, opts) {\n    const path = cmd[1] ?? \"$\";\n    const start = cmd[2] ?? 0;\n    const stop = cmd[3] ?? 0;\n    super([\"JSON.ARRTRIM\", cmd[0], path, start, stop], opts);\n  }\n};\n\n// pkg/commands/json_clear.ts\nvar JsonClearCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.CLEAR\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_del.ts\nvar JsonDelCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.DEL\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_forget.ts\nvar JsonForgetCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.FORGET\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_get.ts\nvar JsonGetCommand = class extends Command {\n  constructor(cmd, opts) {\n    const command = [\"JSON.GET\"];\n    if (typeof cmd[1] === \"string\") {\n      command.push(...cmd);\n    } else {\n      command.push(cmd[0]);\n      if (cmd[1]) {\n        if (cmd[1].indent) {\n          command.push(\"INDENT\", cmd[1].indent);\n        }\n        if (cmd[1].newline) {\n          command.push(\"NEWLINE\", cmd[1].newline);\n        }\n        if (cmd[1].space) {\n          command.push(\"SPACE\", cmd[1].space);\n        }\n      }\n      command.push(...cmd.slice(2));\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/json_mget.ts\nvar JsonMGetCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.MGET\", ...cmd[0], cmd[1]], opts);\n  }\n};\n\n// pkg/commands/json_mset.ts\nvar JsonMSetCommand = class extends Command {\n  constructor(cmd, opts) {\n    const command = [\"JSON.MSET\"];\n    for (const c of cmd) {\n      command.push(c.key, c.path, c.value);\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/json_numincrby.ts\nvar JsonNumIncrByCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.NUMINCRBY\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_nummultby.ts\nvar JsonNumMultByCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.NUMMULTBY\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_objkeys.ts\nvar JsonObjKeysCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.OBJKEYS\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_objlen.ts\nvar JsonObjLenCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.OBJLEN\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_resp.ts\nvar JsonRespCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.RESP\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_set.ts\nvar JsonSetCommand = class extends Command {\n  constructor(cmd, opts) {\n    const command = [\"JSON.SET\", cmd[0], cmd[1], cmd[2]];\n    if (cmd[3]) {\n      if (cmd[3].nx) {\n        command.push(\"NX\");\n      } else if (cmd[3].xx) {\n        command.push(\"XX\");\n      }\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/json_strappend.ts\nvar JsonStrAppendCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.STRAPPEND\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_strlen.ts\nvar JsonStrLenCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.STRLEN\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_toggle.ts\nvar JsonToggleCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.TOGGLE\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/json_type.ts\nvar JsonTypeCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"JSON.TYPE\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/keys.ts\nvar KeysCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"keys\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/lindex.ts\nvar LIndexCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"lindex\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/linsert.ts\nvar LInsertCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"linsert\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/llen.ts\nvar LLenCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"llen\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/lmove.ts\nvar LMoveCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"lmove\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/lmpop.ts\nvar LmPopCommand = class extends Command {\n  constructor(cmd, opts) {\n    const [numkeys, keys, direction, count] = cmd;\n    super([\"LMPOP\", numkeys, ...keys, direction, ...count ? [\"COUNT\", count] : []], opts);\n  }\n};\n\n// pkg/commands/lpop.ts\nvar LPopCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"lpop\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/lpos.ts\nvar LPosCommand = class extends Command {\n  constructor(cmd, opts) {\n    const args = [\"lpos\", cmd[0], cmd[1]];\n    if (typeof cmd[2]?.rank === \"number\") {\n      args.push(\"rank\", cmd[2].rank);\n    }\n    if (typeof cmd[2]?.count === \"number\") {\n      args.push(\"count\", cmd[2].count);\n    }\n    if (typeof cmd[2]?.maxLen === \"number\") {\n      args.push(\"maxLen\", cmd[2].maxLen);\n    }\n    super(args, opts);\n  }\n};\n\n// pkg/commands/lpush.ts\nvar LPushCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"lpush\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/lpushx.ts\nvar LPushXCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"lpushx\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/lrange.ts\nvar LRangeCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"lrange\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/lrem.ts\nvar LRemCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"lrem\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/lset.ts\nvar LSetCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"lset\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/ltrim.ts\nvar LTrimCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"ltrim\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/mget.ts\nvar MGetCommand = class extends Command {\n  constructor(cmd, opts) {\n    const keys = Array.isArray(cmd[0]) ? cmd[0] : cmd;\n    super([\"mget\", ...keys], opts);\n  }\n};\n\n// pkg/commands/mset.ts\nvar MSetCommand = class extends Command {\n  constructor([kv], opts) {\n    super([\"mset\", ...Object.entries(kv).flatMap(([key, value]) => [key, value])], opts);\n  }\n};\n\n// pkg/commands/msetnx.ts\nvar MSetNXCommand = class extends Command {\n  constructor([kv], opts) {\n    super([\"msetnx\", ...Object.entries(kv).flat()], opts);\n  }\n};\n\n// pkg/commands/persist.ts\nvar PersistCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"persist\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/pexpire.ts\nvar PExpireCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"pexpire\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/pexpireat.ts\nvar PExpireAtCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"pexpireat\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/pfadd.ts\nvar PfAddCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"pfadd\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/pfcount.ts\nvar PfCountCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"pfcount\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/pfmerge.ts\nvar PfMergeCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"pfmerge\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/ping.ts\nvar PingCommand = class extends Command {\n  constructor(cmd, opts) {\n    const command = [\"ping\"];\n    if (cmd?.[0] !== void 0) {\n      command.push(cmd[0]);\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/psetex.ts\nvar PSetEXCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"psetex\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/pttl.ts\nvar PTtlCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"pttl\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/publish.ts\nvar PublishCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"publish\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/randomkey.ts\nvar RandomKeyCommand = class extends Command {\n  constructor(opts) {\n    super([\"randomkey\"], opts);\n  }\n};\n\n// pkg/commands/rename.ts\nvar RenameCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"rename\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/renamenx.ts\nvar RenameNXCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"renamenx\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/rpop.ts\nvar RPopCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"rpop\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/rpush.ts\nvar RPushCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"rpush\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/rpushx.ts\nvar RPushXCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"rpushx\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/sadd.ts\nvar SAddCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"sadd\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/scan.ts\nvar ScanCommand = class extends Command {\n  constructor([cursor, opts], cmdOpts) {\n    const command = [\"scan\", cursor];\n    if (opts?.match) {\n      command.push(\"match\", opts.match);\n    }\n    if (typeof opts?.count === \"number\") {\n      command.push(\"count\", opts.count);\n    }\n    if (opts?.type && opts.type.length > 0) {\n      command.push(\"type\", opts.type);\n    }\n    super(command, {\n      deserialize: deserializeScanResponse,\n      ...cmdOpts\n    });\n  }\n};\n\n// pkg/commands/scard.ts\nvar SCardCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"scard\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/script_exists.ts\nvar ScriptExistsCommand = class extends Command {\n  constructor(hashes, opts) {\n    super([\"script\", \"exists\", ...hashes], {\n      deserialize: (result) => result,\n      ...opts\n    });\n  }\n};\n\n// pkg/commands/script_flush.ts\nvar ScriptFlushCommand = class extends Command {\n  constructor([opts], cmdOpts) {\n    const cmd = [\"script\", \"flush\"];\n    if (opts?.sync) {\n      cmd.push(\"sync\");\n    } else if (opts?.async) {\n      cmd.push(\"async\");\n    }\n    super(cmd, cmdOpts);\n  }\n};\n\n// pkg/commands/script_load.ts\nvar ScriptLoadCommand = class extends Command {\n  constructor(args, opts) {\n    super([\"script\", \"load\", ...args], opts);\n  }\n};\n\n// pkg/commands/sdiff.ts\nvar SDiffCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"sdiff\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/sdiffstore.ts\nvar SDiffStoreCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"sdiffstore\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/set.ts\nvar SetCommand = class extends Command {\n  constructor([key, value, opts], cmdOpts) {\n    const command = [\"set\", key, value];\n    if (opts) {\n      if (\"nx\" in opts && opts.nx) {\n        command.push(\"nx\");\n      } else if (\"xx\" in opts && opts.xx) {\n        command.push(\"xx\");\n      }\n      if (\"get\" in opts && opts.get) {\n        command.push(\"get\");\n      }\n      if (\"ex\" in opts && typeof opts.ex === \"number\") {\n        command.push(\"ex\", opts.ex);\n      } else if (\"px\" in opts && typeof opts.px === \"number\") {\n        command.push(\"px\", opts.px);\n      } else if (\"exat\" in opts && typeof opts.exat === \"number\") {\n        command.push(\"exat\", opts.exat);\n      } else if (\"pxat\" in opts && typeof opts.pxat === \"number\") {\n        command.push(\"pxat\", opts.pxat);\n      } else if (\"keepTtl\" in opts && opts.keepTtl) {\n        command.push(\"keepTtl\");\n      }\n    }\n    super(command, cmdOpts);\n  }\n};\n\n// pkg/commands/setbit.ts\nvar SetBitCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"setbit\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/setex.ts\nvar SetExCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"setex\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/setnx.ts\nvar SetNxCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"setnx\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/setrange.ts\nvar SetRangeCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"setrange\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/sinter.ts\nvar SInterCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"sinter\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/sinterstore.ts\nvar SInterStoreCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"sinterstore\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/sismember.ts\nvar SIsMemberCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"sismember\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/smembers.ts\nvar SMembersCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"smembers\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/smismember.ts\nvar SMIsMemberCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"smismember\", cmd[0], ...cmd[1]], opts);\n  }\n};\n\n// pkg/commands/smove.ts\nvar SMoveCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"smove\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/spop.ts\nvar SPopCommand = class extends Command {\n  constructor([key, count], opts) {\n    const command = [\"spop\", key];\n    if (typeof count === \"number\") {\n      command.push(count);\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/srandmember.ts\nvar SRandMemberCommand = class extends Command {\n  constructor([key, count], opts) {\n    const command = [\"srandmember\", key];\n    if (typeof count === \"number\") {\n      command.push(count);\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/srem.ts\nvar SRemCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"srem\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/sscan.ts\nvar SScanCommand = class extends Command {\n  constructor([key, cursor, opts], cmdOpts) {\n    const command = [\"sscan\", key, cursor];\n    if (opts?.match) {\n      command.push(\"match\", opts.match);\n    }\n    if (typeof opts?.count === \"number\") {\n      command.push(\"count\", opts.count);\n    }\n    super(command, {\n      deserialize: deserializeScanResponse,\n      ...cmdOpts\n    });\n  }\n};\n\n// pkg/commands/strlen.ts\nvar StrLenCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"strlen\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/sunion.ts\nvar SUnionCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"sunion\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/sunionstore.ts\nvar SUnionStoreCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"sunionstore\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/time.ts\nvar TimeCommand = class extends Command {\n  constructor(opts) {\n    super([\"time\"], opts);\n  }\n};\n\n// pkg/commands/touch.ts\nvar TouchCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"touch\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/ttl.ts\nvar TtlCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"ttl\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/type.ts\nvar TypeCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"type\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/unlink.ts\nvar UnlinkCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"unlink\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/xack.ts\nvar XAckCommand = class extends Command {\n  constructor([key, group, id], opts) {\n    const ids = Array.isArray(id) ? [...id] : [id];\n    super([\"XACK\", key, group, ...ids], opts);\n  }\n};\n\n// pkg/commands/xadd.ts\nvar XAddCommand = class extends Command {\n  constructor([key, id, entries, opts], commandOptions) {\n    const command = [\"XADD\", key];\n    if (opts) {\n      if (opts.nomkStream) {\n        command.push(\"NOMKSTREAM\");\n      }\n      if (opts.trim) {\n        command.push(opts.trim.type, opts.trim.comparison, opts.trim.threshold);\n        if (opts.trim.limit !== void 0) {\n          command.push(\"LIMIT\", opts.trim.limit);\n        }\n      }\n    }\n    command.push(id);\n    for (const [k, v] of Object.entries(entries)) {\n      command.push(k, v);\n    }\n    super(command, commandOptions);\n  }\n};\n\n// pkg/commands/xautoclaim.ts\nvar XAutoClaim = class extends Command {\n  constructor([key, group, consumer, minIdleTime, start, options], opts) {\n    const commands = [];\n    if (options?.count) {\n      commands.push(\"COUNT\", options.count);\n    }\n    if (options?.justId) {\n      commands.push(\"JUSTID\");\n    }\n    super([\"XAUTOCLAIM\", key, group, consumer, minIdleTime, start, ...commands], opts);\n  }\n};\n\n// pkg/commands/xclaim.ts\nvar XClaimCommand = class extends Command {\n  constructor([key, group, consumer, minIdleTime, id, options], opts) {\n    const ids = Array.isArray(id) ? [...id] : [id];\n    const commands = [];\n    if (options?.idleMS) {\n      commands.push(\"IDLE\", options.idleMS);\n    }\n    if (options?.idleMS) {\n      commands.push(\"TIME\", options.timeMS);\n    }\n    if (options?.retryCount) {\n      commands.push(\"RETRYCOUNT\", options.retryCount);\n    }\n    if (options?.force) {\n      commands.push(\"FORCE\");\n    }\n    if (options?.justId) {\n      commands.push(\"JUSTID\");\n    }\n    if (options?.lastId) {\n      commands.push(\"LASTID\", options.lastId);\n    }\n    super([\"XCLAIM\", key, group, consumer, minIdleTime, ...ids, ...commands], opts);\n  }\n};\n\n// pkg/commands/xdel.ts\nvar XDelCommand = class extends Command {\n  constructor([key, ids], opts) {\n    const cmds = Array.isArray(ids) ? [...ids] : [ids];\n    super([\"XDEL\", key, ...cmds], opts);\n  }\n};\n\n// pkg/commands/xgroup.ts\nvar XGroupCommand = class extends Command {\n  constructor([key, opts], commandOptions) {\n    const command = [\"XGROUP\"];\n    switch (opts.type) {\n      case \"CREATE\": {\n        command.push(\"CREATE\", key, opts.group, opts.id);\n        if (opts.options) {\n          if (opts.options.MKSTREAM) {\n            command.push(\"MKSTREAM\");\n          }\n          if (opts.options.ENTRIESREAD !== void 0) {\n            command.push(\"ENTRIESREAD\", opts.options.ENTRIESREAD.toString());\n          }\n        }\n        break;\n      }\n      case \"CREATECONSUMER\": {\n        command.push(\"CREATECONSUMER\", key, opts.group, opts.consumer);\n        break;\n      }\n      case \"DELCONSUMER\": {\n        command.push(\"DELCONSUMER\", key, opts.group, opts.consumer);\n        break;\n      }\n      case \"DESTROY\": {\n        command.push(\"DESTROY\", key, opts.group);\n        break;\n      }\n      case \"SETID\": {\n        command.push(\"SETID\", key, opts.group, opts.id);\n        if (opts.options?.ENTRIESREAD !== void 0) {\n          command.push(\"ENTRIESREAD\", opts.options.ENTRIESREAD.toString());\n        }\n        break;\n      }\n      default: {\n        throw new Error(\"Invalid XGROUP\");\n      }\n    }\n    super(command, commandOptions);\n  }\n};\n\n// pkg/commands/xinfo.ts\nvar XInfoCommand = class extends Command {\n  constructor([key, options], opts) {\n    const cmds = [];\n    if (options.type === \"CONSUMERS\") {\n      cmds.push(\"CONSUMERS\", key, options.group);\n    } else {\n      cmds.push(\"GROUPS\", key);\n    }\n    super([\"XINFO\", ...cmds], opts);\n  }\n};\n\n// pkg/commands/xlen.ts\nvar XLenCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"XLEN\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/xpending.ts\nvar XPendingCommand = class extends Command {\n  constructor([key, group, start, end, count, options], opts) {\n    const consumers = options?.consumer === void 0 ? [] : Array.isArray(options.consumer) ? [...options.consumer] : [options.consumer];\n    super(\n      [\n        \"XPENDING\",\n        key,\n        group,\n        ...options?.idleTime ? [\"IDLE\", options.idleTime] : [],\n        start,\n        end,\n        count,\n        ...consumers\n      ],\n      opts\n    );\n  }\n};\n\n// pkg/commands/xrange.ts\nfunction deserialize4(result) {\n  const obj = {};\n  for (const e of result) {\n    for (let i = 0; i < e.length; i += 2) {\n      const streamId = e[i];\n      const entries = e[i + 1];\n      if (!(streamId in obj)) {\n        obj[streamId] = {};\n      }\n      for (let j = 0; j < entries.length; j += 2) {\n        const field = entries[j];\n        const value = entries[j + 1];\n        try {\n          obj[streamId][field] = JSON.parse(value);\n        } catch {\n          obj[streamId][field] = value;\n        }\n      }\n    }\n  }\n  return obj;\n}\nvar XRangeCommand = class extends Command {\n  constructor([key, start, end, count], opts) {\n    const command = [\"XRANGE\", key, start, end];\n    if (typeof count === \"number\") {\n      command.push(\"COUNT\", count);\n    }\n    super(command, {\n      deserialize: (result) => deserialize4(result),\n      ...opts\n    });\n  }\n};\n\n// pkg/commands/xread.ts\nvar UNBALANCED_XREAD_ERR = \"ERR Unbalanced XREAD list of streams: for each stream key an ID or '$' must be specified\";\nvar XReadCommand = class extends Command {\n  constructor([key, id, options], opts) {\n    if (Array.isArray(key) && Array.isArray(id) && key.length !== id.length) {\n      throw new Error(UNBALANCED_XREAD_ERR);\n    }\n    const commands = [];\n    if (typeof options?.count === \"number\") {\n      commands.push(\"COUNT\", options.count);\n    }\n    if (typeof options?.blockMS === \"number\") {\n      commands.push(\"BLOCK\", options.blockMS);\n    }\n    commands.push(\n      \"STREAMS\",\n      ...Array.isArray(key) ? [...key] : [key],\n      ...Array.isArray(id) ? [...id] : [id]\n    );\n    super([\"XREAD\", ...commands], opts);\n  }\n};\n\n// pkg/commands/xreadgroup.ts\nvar UNBALANCED_XREADGROUP_ERR = \"ERR Unbalanced XREADGROUP list of streams: for each stream key an ID or '$' must be specified\";\nvar XReadGroupCommand = class extends Command {\n  constructor([group, consumer, key, id, options], opts) {\n    if (Array.isArray(key) && Array.isArray(id) && key.length !== id.length) {\n      throw new Error(UNBALANCED_XREADGROUP_ERR);\n    }\n    const commands = [];\n    if (typeof options?.count === \"number\") {\n      commands.push(\"COUNT\", options.count);\n    }\n    if (typeof options?.blockMS === \"number\") {\n      commands.push(\"BLOCK\", options.blockMS);\n    }\n    if (typeof options?.NOACK === \"boolean\" && options.NOACK) {\n      commands.push(\"NOACK\");\n    }\n    commands.push(\n      \"STREAMS\",\n      ...Array.isArray(key) ? [...key] : [key],\n      ...Array.isArray(id) ? [...id] : [id]\n    );\n    super([\"XREADGROUP\", \"GROUP\", group, consumer, ...commands], opts);\n  }\n};\n\n// pkg/commands/xrevrange.ts\nvar XRevRangeCommand = class extends Command {\n  constructor([key, end, start, count], opts) {\n    const command = [\"XREVRANGE\", key, end, start];\n    if (typeof count === \"number\") {\n      command.push(\"COUNT\", count);\n    }\n    super(command, {\n      deserialize: (result) => deserialize5(result),\n      ...opts\n    });\n  }\n};\nfunction deserialize5(result) {\n  const obj = {};\n  for (const e of result) {\n    for (let i = 0; i < e.length; i += 2) {\n      const streamId = e[i];\n      const entries = e[i + 1];\n      if (!(streamId in obj)) {\n        obj[streamId] = {};\n      }\n      for (let j = 0; j < entries.length; j += 2) {\n        const field = entries[j];\n        const value = entries[j + 1];\n        try {\n          obj[streamId][field] = JSON.parse(value);\n        } catch {\n          obj[streamId][field] = value;\n        }\n      }\n    }\n  }\n  return obj;\n}\n\n// pkg/commands/xtrim.ts\nvar XTrimCommand = class extends Command {\n  constructor([key, options], opts) {\n    const { limit, strategy, threshold, exactness = \"~\" } = options;\n    super([\"XTRIM\", key, strategy, exactness, threshold, ...limit ? [\"LIMIT\", limit] : []], opts);\n  }\n};\n\n// pkg/commands/zadd.ts\nvar ZAddCommand = class extends Command {\n  constructor([key, arg1, ...arg2], opts) {\n    const command = [\"zadd\", key];\n    if (\"nx\" in arg1 && arg1.nx) {\n      command.push(\"nx\");\n    } else if (\"xx\" in arg1 && arg1.xx) {\n      command.push(\"xx\");\n    }\n    if (\"ch\" in arg1 && arg1.ch) {\n      command.push(\"ch\");\n    }\n    if (\"incr\" in arg1 && arg1.incr) {\n      command.push(\"incr\");\n    }\n    if (\"lt\" in arg1 && arg1.lt) {\n      command.push(\"lt\");\n    } else if (\"gt\" in arg1 && arg1.gt) {\n      command.push(\"gt\");\n    }\n    if (\"score\" in arg1 && \"member\" in arg1) {\n      command.push(arg1.score, arg1.member);\n    }\n    command.push(...arg2.flatMap(({ score, member }) => [score, member]));\n    super(command, opts);\n  }\n};\n\n// pkg/commands/zcard.ts\nvar ZCardCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zcard\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zcount.ts\nvar ZCountCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zcount\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zincrby.ts\nvar ZIncrByCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zincrby\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zinterstore.ts\nvar ZInterStoreCommand = class extends Command {\n  constructor([destination, numKeys, keyOrKeys, opts], cmdOpts) {\n    const command = [\"zinterstore\", destination, numKeys];\n    if (Array.isArray(keyOrKeys)) {\n      command.push(...keyOrKeys);\n    } else {\n      command.push(keyOrKeys);\n    }\n    if (opts) {\n      if (\"weights\" in opts && opts.weights) {\n        command.push(\"weights\", ...opts.weights);\n      } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n        command.push(\"weights\", opts.weight);\n      }\n      if (\"aggregate\" in opts) {\n        command.push(\"aggregate\", opts.aggregate);\n      }\n    }\n    super(command, cmdOpts);\n  }\n};\n\n// pkg/commands/zlexcount.ts\nvar ZLexCountCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zlexcount\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zpopmax.ts\nvar ZPopMaxCommand = class extends Command {\n  constructor([key, count], opts) {\n    const command = [\"zpopmax\", key];\n    if (typeof count === \"number\") {\n      command.push(count);\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/zpopmin.ts\nvar ZPopMinCommand = class extends Command {\n  constructor([key, count], opts) {\n    const command = [\"zpopmin\", key];\n    if (typeof count === \"number\") {\n      command.push(count);\n    }\n    super(command, opts);\n  }\n};\n\n// pkg/commands/zrange.ts\nvar ZRangeCommand = class extends Command {\n  constructor([key, min, max, opts], cmdOpts) {\n    const command = [\"zrange\", key, min, max];\n    if (opts?.byScore) {\n      command.push(\"byscore\");\n    }\n    if (opts?.byLex) {\n      command.push(\"bylex\");\n    }\n    if (opts?.rev) {\n      command.push(\"rev\");\n    }\n    if (opts?.count !== void 0 && opts.offset !== void 0) {\n      command.push(\"limit\", opts.offset, opts.count);\n    }\n    if (opts?.withScores) {\n      command.push(\"withscores\");\n    }\n    super(command, cmdOpts);\n  }\n};\n\n// pkg/commands/zrank.ts\nvar ZRankCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zrank\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zrem.ts\nvar ZRemCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zrem\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zremrangebylex.ts\nvar ZRemRangeByLexCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zremrangebylex\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zremrangebyrank.ts\nvar ZRemRangeByRankCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zremrangebyrank\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zremrangebyscore.ts\nvar ZRemRangeByScoreCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zremrangebyscore\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zrevrank.ts\nvar ZRevRankCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zrevrank\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zscan.ts\nvar ZScanCommand = class extends Command {\n  constructor([key, cursor, opts], cmdOpts) {\n    const command = [\"zscan\", key, cursor];\n    if (opts?.match) {\n      command.push(\"match\", opts.match);\n    }\n    if (typeof opts?.count === \"number\") {\n      command.push(\"count\", opts.count);\n    }\n    super(command, {\n      deserialize: deserializeScanResponse,\n      ...cmdOpts\n    });\n  }\n};\n\n// pkg/commands/zscore.ts\nvar ZScoreCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zscore\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zunion.ts\nvar ZUnionCommand = class extends Command {\n  constructor([numKeys, keyOrKeys, opts], cmdOpts) {\n    const command = [\"zunion\", numKeys];\n    if (Array.isArray(keyOrKeys)) {\n      command.push(...keyOrKeys);\n    } else {\n      command.push(keyOrKeys);\n    }\n    if (opts) {\n      if (\"weights\" in opts && opts.weights) {\n        command.push(\"weights\", ...opts.weights);\n      } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n        command.push(\"weights\", opts.weight);\n      }\n      if (\"aggregate\" in opts) {\n        command.push(\"aggregate\", opts.aggregate);\n      }\n      if (opts.withScores) {\n        command.push(\"withscores\");\n      }\n    }\n    super(command, cmdOpts);\n  }\n};\n\n// pkg/commands/zunionstore.ts\nvar ZUnionStoreCommand = class extends Command {\n  constructor([destination, numKeys, keyOrKeys, opts], cmdOpts) {\n    const command = [\"zunionstore\", destination, numKeys];\n    if (Array.isArray(keyOrKeys)) {\n      command.push(...keyOrKeys);\n    } else {\n      command.push(keyOrKeys);\n    }\n    if (opts) {\n      if (\"weights\" in opts && opts.weights) {\n        command.push(\"weights\", ...opts.weights);\n      } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n        command.push(\"weights\", opts.weight);\n      }\n      if (\"aggregate\" in opts) {\n        command.push(\"aggregate\", opts.aggregate);\n      }\n    }\n    super(command, cmdOpts);\n  }\n};\n\n// pkg/commands/zdiffstore.ts\nvar ZDiffStoreCommand = class extends Command {\n  constructor(cmd, opts) {\n    super([\"zdiffstore\", ...cmd], opts);\n  }\n};\n\n// pkg/commands/zmscore.ts\nvar ZMScoreCommand = class extends Command {\n  constructor(cmd, opts) {\n    const [key, members] = cmd;\n    super([\"zmscore\", key, ...members], opts);\n  }\n};\n\n// pkg/pipeline.ts\nvar Pipeline = class {\n  client;\n  commands;\n  commandOptions;\n  multiExec;\n  constructor(opts) {\n    this.client = opts.client;\n    this.commands = [];\n    this.commandOptions = opts.commandOptions;\n    this.multiExec = opts.multiExec ?? false;\n    if (this.commandOptions?.latencyLogging) {\n      const originalExec = this.exec.bind(this);\n      this.exec = async (options) => {\n        const start = performance.now();\n        const result = await (options ? originalExec(options) : originalExec());\n        const end = performance.now();\n        const loggerResult = (end - start).toFixed(2);\n        console.log(\n          `Latency for \\x1B[38;2;19;185;39m${this.multiExec ? [\"MULTI-EXEC\"] : [\"PIPELINE\"].toString().toUpperCase()}\\x1B[0m: \\x1B[38;2;0;255;255m${loggerResult} ms\\x1B[0m`\n        );\n        return result;\n      };\n    }\n  }\n  exec = async (options) => {\n    if (this.commands.length === 0) {\n      throw new Error(\"Pipeline is empty\");\n    }\n    const path = this.multiExec ? [\"multi-exec\"] : [\"pipeline\"];\n    const res = await this.client.request({\n      path,\n      body: Object.values(this.commands).map((c) => c.command)\n    });\n    return options?.keepErrors ? res.map(({ error, result }, i) => {\n      return {\n        error,\n        result: this.commands[i].deserialize(result)\n      };\n    }) : res.map(({ error, result }, i) => {\n      if (error) {\n        throw new UpstashError(\n          `Command ${i + 1} [ ${this.commands[i].command[0]} ] failed: ${error}`\n        );\n      }\n      return this.commands[i].deserialize(result);\n    });\n  };\n  /**\n   * Returns the length of pipeline before the execution\n   */\n  length() {\n    return this.commands.length;\n  }\n  /**\n   * Pushes a command into the pipeline and returns a chainable instance of the\n   * pipeline\n   */\n  chain(command) {\n    this.commands.push(command);\n    return this;\n  }\n  /**\n   * @see https://redis.io/commands/append\n   */\n  append = (...args) => this.chain(new AppendCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/bitcount\n   */\n  bitcount = (...args) => this.chain(new BitCountCommand(args, this.commandOptions));\n  /**\n   * Returns an instance that can be used to execute `BITFIELD` commands on one key.\n   *\n   * @example\n   * ```typescript\n   * redis.set(\"mykey\", 0);\n   * const result = await redis.pipeline()\n   *   .bitfield(\"mykey\")\n   *   .set(\"u4\", 0, 16)\n   *   .incr(\"u4\", \"#1\", 1)\n   *   .exec();\n   * console.log(result); // [[0, 1]]\n   * ```\n   *\n   * @see https://redis.io/commands/bitfield\n   */\n  bitfield = (...args) => new BitFieldCommand(args, this.client, this.commandOptions, this.chain.bind(this));\n  /**\n   * @see https://redis.io/commands/bitop\n   */\n  bitop = (op, destinationKey, sourceKey, ...sourceKeys) => this.chain(\n    new BitOpCommand([op, destinationKey, sourceKey, ...sourceKeys], this.commandOptions)\n  );\n  /**\n   * @see https://redis.io/commands/bitpos\n   */\n  bitpos = (...args) => this.chain(new BitPosCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/copy\n   */\n  copy = (...args) => this.chain(new CopyCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zdiffstore\n   */\n  zdiffstore = (...args) => this.chain(new ZDiffStoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/dbsize\n   */\n  dbsize = () => this.chain(new DBSizeCommand(this.commandOptions));\n  /**\n   * @see https://redis.io/commands/decr\n   */\n  decr = (...args) => this.chain(new DecrCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/decrby\n   */\n  decrby = (...args) => this.chain(new DecrByCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/del\n   */\n  del = (...args) => this.chain(new DelCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/echo\n   */\n  echo = (...args) => this.chain(new EchoCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/eval\n   */\n  eval = (...args) => this.chain(new EvalCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/evalsha\n   */\n  evalsha = (...args) => this.chain(new EvalshaCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/exists\n   */\n  exists = (...args) => this.chain(new ExistsCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/expire\n   */\n  expire = (...args) => this.chain(new ExpireCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/expireat\n   */\n  expireat = (...args) => this.chain(new ExpireAtCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/flushall\n   */\n  flushall = (args) => this.chain(new FlushAllCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/flushdb\n   */\n  flushdb = (...args) => this.chain(new FlushDBCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/geoadd\n   */\n  geoadd = (...args) => this.chain(new GeoAddCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/geodist\n   */\n  geodist = (...args) => this.chain(new GeoDistCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/geopos\n   */\n  geopos = (...args) => this.chain(new GeoPosCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/geohash\n   */\n  geohash = (...args) => this.chain(new GeoHashCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/geosearch\n   */\n  geosearch = (...args) => this.chain(new GeoSearchCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/geosearchstore\n   */\n  geosearchstore = (...args) => this.chain(new GeoSearchStoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/get\n   */\n  get = (...args) => this.chain(new GetCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/getbit\n   */\n  getbit = (...args) => this.chain(new GetBitCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/getdel\n   */\n  getdel = (...args) => this.chain(new GetDelCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/getex\n   */\n  getex = (...args) => this.chain(new GetExCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/getrange\n   */\n  getrange = (...args) => this.chain(new GetRangeCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/getset\n   */\n  getset = (key, value) => this.chain(new GetSetCommand([key, value], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hdel\n   */\n  hdel = (...args) => this.chain(new HDelCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hexists\n   */\n  hexists = (...args) => this.chain(new HExistsCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hget\n   */\n  hget = (...args) => this.chain(new HGetCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hgetall\n   */\n  hgetall = (...args) => this.chain(new HGetAllCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hincrby\n   */\n  hincrby = (...args) => this.chain(new HIncrByCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hincrbyfloat\n   */\n  hincrbyfloat = (...args) => this.chain(new HIncrByFloatCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hkeys\n   */\n  hkeys = (...args) => this.chain(new HKeysCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hlen\n   */\n  hlen = (...args) => this.chain(new HLenCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hmget\n   */\n  hmget = (...args) => this.chain(new HMGetCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hmset\n   */\n  hmset = (key, kv) => this.chain(new HMSetCommand([key, kv], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hrandfield\n   */\n  hrandfield = (key, count, withValues) => this.chain(new HRandFieldCommand([key, count, withValues], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hscan\n   */\n  hscan = (...args) => this.chain(new HScanCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hset\n   */\n  hset = (key, kv) => this.chain(new HSetCommand([key, kv], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hsetnx\n   */\n  hsetnx = (key, field, value) => this.chain(new HSetNXCommand([key, field, value], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hstrlen\n   */\n  hstrlen = (...args) => this.chain(new HStrLenCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/hvals\n   */\n  hvals = (...args) => this.chain(new HValsCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/incr\n   */\n  incr = (...args) => this.chain(new IncrCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/incrby\n   */\n  incrby = (...args) => this.chain(new IncrByCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/incrbyfloat\n   */\n  incrbyfloat = (...args) => this.chain(new IncrByFloatCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/keys\n   */\n  keys = (...args) => this.chain(new KeysCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lindex\n   */\n  lindex = (...args) => this.chain(new LIndexCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/linsert\n   */\n  linsert = (key, direction, pivot, value) => this.chain(new LInsertCommand([key, direction, pivot, value], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/llen\n   */\n  llen = (...args) => this.chain(new LLenCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lmove\n   */\n  lmove = (...args) => this.chain(new LMoveCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lpop\n   */\n  lpop = (...args) => this.chain(new LPopCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lmpop\n   */\n  lmpop = (...args) => this.chain(new LmPopCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lpos\n   */\n  lpos = (...args) => this.chain(new LPosCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lpush\n   */\n  lpush = (key, ...elements) => this.chain(new LPushCommand([key, ...elements], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lpushx\n   */\n  lpushx = (key, ...elements) => this.chain(new LPushXCommand([key, ...elements], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lrange\n   */\n  lrange = (...args) => this.chain(new LRangeCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lrem\n   */\n  lrem = (key, count, value) => this.chain(new LRemCommand([key, count, value], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/lset\n   */\n  lset = (key, index, value) => this.chain(new LSetCommand([key, index, value], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/ltrim\n   */\n  ltrim = (...args) => this.chain(new LTrimCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/mget\n   */\n  mget = (...args) => this.chain(new MGetCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/mset\n   */\n  mset = (kv) => this.chain(new MSetCommand([kv], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/msetnx\n   */\n  msetnx = (kv) => this.chain(new MSetNXCommand([kv], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/persist\n   */\n  persist = (...args) => this.chain(new PersistCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/pexpire\n   */\n  pexpire = (...args) => this.chain(new PExpireCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/pexpireat\n   */\n  pexpireat = (...args) => this.chain(new PExpireAtCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/pfadd\n   */\n  pfadd = (...args) => this.chain(new PfAddCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/pfcount\n   */\n  pfcount = (...args) => this.chain(new PfCountCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/pfmerge\n   */\n  pfmerge = (...args) => this.chain(new PfMergeCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/ping\n   */\n  ping = (args) => this.chain(new PingCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/psetex\n   */\n  psetex = (key, ttl, value) => this.chain(new PSetEXCommand([key, ttl, value], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/pttl\n   */\n  pttl = (...args) => this.chain(new PTtlCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/publish\n   */\n  publish = (...args) => this.chain(new PublishCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/randomkey\n   */\n  randomkey = () => this.chain(new RandomKeyCommand(this.commandOptions));\n  /**\n   * @see https://redis.io/commands/rename\n   */\n  rename = (...args) => this.chain(new RenameCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/renamenx\n   */\n  renamenx = (...args) => this.chain(new RenameNXCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/rpop\n   */\n  rpop = (...args) => this.chain(new RPopCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/rpush\n   */\n  rpush = (key, ...elements) => this.chain(new RPushCommand([key, ...elements], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/rpushx\n   */\n  rpushx = (key, ...elements) => this.chain(new RPushXCommand([key, ...elements], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/sadd\n   */\n  sadd = (key, member, ...members) => this.chain(new SAddCommand([key, member, ...members], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/scan\n   */\n  scan = (...args) => this.chain(new ScanCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/scard\n   */\n  scard = (...args) => this.chain(new SCardCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/script-exists\n   */\n  scriptExists = (...args) => this.chain(new ScriptExistsCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/script-flush\n   */\n  scriptFlush = (...args) => this.chain(new ScriptFlushCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/script-load\n   */\n  scriptLoad = (...args) => this.chain(new ScriptLoadCommand(args, this.commandOptions));\n  /*)*\n   * @see https://redis.io/commands/sdiff\n   */\n  sdiff = (...args) => this.chain(new SDiffCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/sdiffstore\n   */\n  sdiffstore = (...args) => this.chain(new SDiffStoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/set\n   */\n  set = (key, value, opts) => this.chain(new SetCommand([key, value, opts], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/setbit\n   */\n  setbit = (...args) => this.chain(new SetBitCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/setex\n   */\n  setex = (key, ttl, value) => this.chain(new SetExCommand([key, ttl, value], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/setnx\n   */\n  setnx = (key, value) => this.chain(new SetNxCommand([key, value], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/setrange\n   */\n  setrange = (...args) => this.chain(new SetRangeCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/sinter\n   */\n  sinter = (...args) => this.chain(new SInterCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/sinterstore\n   */\n  sinterstore = (...args) => this.chain(new SInterStoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/sismember\n   */\n  sismember = (key, member) => this.chain(new SIsMemberCommand([key, member], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/smembers\n   */\n  smembers = (...args) => this.chain(new SMembersCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/smismember\n   */\n  smismember = (key, members) => this.chain(new SMIsMemberCommand([key, members], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/smove\n   */\n  smove = (source, destination, member) => this.chain(new SMoveCommand([source, destination, member], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/spop\n   */\n  spop = (...args) => this.chain(new SPopCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/srandmember\n   */\n  srandmember = (...args) => this.chain(new SRandMemberCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/srem\n   */\n  srem = (key, ...members) => this.chain(new SRemCommand([key, ...members], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/sscan\n   */\n  sscan = (...args) => this.chain(new SScanCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/strlen\n   */\n  strlen = (...args) => this.chain(new StrLenCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/sunion\n   */\n  sunion = (...args) => this.chain(new SUnionCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/sunionstore\n   */\n  sunionstore = (...args) => this.chain(new SUnionStoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/time\n   */\n  time = () => this.chain(new TimeCommand(this.commandOptions));\n  /**\n   * @see https://redis.io/commands/touch\n   */\n  touch = (...args) => this.chain(new TouchCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/ttl\n   */\n  ttl = (...args) => this.chain(new TtlCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/type\n   */\n  type = (...args) => this.chain(new TypeCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/unlink\n   */\n  unlink = (...args) => this.chain(new UnlinkCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zadd\n   */\n  zadd = (...args) => {\n    if (\"score\" in args[1]) {\n      return this.chain(\n        new ZAddCommand([args[0], args[1], ...args.slice(2)], this.commandOptions)\n      );\n    }\n    return this.chain(\n      new ZAddCommand(\n        [args[0], args[1], ...args.slice(2)],\n        this.commandOptions\n      )\n    );\n  };\n  /**\n   * @see https://redis.io/commands/xadd\n   */\n  xadd = (...args) => this.chain(new XAddCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xack\n   */\n  xack = (...args) => this.chain(new XAckCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xdel\n   */\n  xdel = (...args) => this.chain(new XDelCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xgroup\n   */\n  xgroup = (...args) => this.chain(new XGroupCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xread\n   */\n  xread = (...args) => this.chain(new XReadCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xreadgroup\n   */\n  xreadgroup = (...args) => this.chain(new XReadGroupCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xinfo\n   */\n  xinfo = (...args) => this.chain(new XInfoCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xlen\n   */\n  xlen = (...args) => this.chain(new XLenCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xpending\n   */\n  xpending = (...args) => this.chain(new XPendingCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xclaim\n   */\n  xclaim = (...args) => this.chain(new XClaimCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xautoclaim\n   */\n  xautoclaim = (...args) => this.chain(new XAutoClaim(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xtrim\n   */\n  xtrim = (...args) => this.chain(new XTrimCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xrange\n   */\n  xrange = (...args) => this.chain(new XRangeCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/xrevrange\n   */\n  xrevrange = (...args) => this.chain(new XRevRangeCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zcard\n   */\n  zcard = (...args) => this.chain(new ZCardCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zcount\n   */\n  zcount = (...args) => this.chain(new ZCountCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zincrby\n   */\n  zincrby = (key, increment, member) => this.chain(new ZIncrByCommand([key, increment, member], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zinterstore\n   */\n  zinterstore = (...args) => this.chain(new ZInterStoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zlexcount\n   */\n  zlexcount = (...args) => this.chain(new ZLexCountCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zmscore\n   */\n  zmscore = (...args) => this.chain(new ZMScoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zpopmax\n   */\n  zpopmax = (...args) => this.chain(new ZPopMaxCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zpopmin\n   */\n  zpopmin = (...args) => this.chain(new ZPopMinCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zrange\n   */\n  zrange = (...args) => this.chain(new ZRangeCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zrank\n   */\n  zrank = (key, member) => this.chain(new ZRankCommand([key, member], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zrem\n   */\n  zrem = (key, ...members) => this.chain(new ZRemCommand([key, ...members], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zremrangebylex\n   */\n  zremrangebylex = (...args) => this.chain(new ZRemRangeByLexCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zremrangebyrank\n   */\n  zremrangebyrank = (...args) => this.chain(new ZRemRangeByRankCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zremrangebyscore\n   */\n  zremrangebyscore = (...args) => this.chain(new ZRemRangeByScoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zrevrank\n   */\n  zrevrank = (key, member) => this.chain(new ZRevRankCommand([key, member], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zscan\n   */\n  zscan = (...args) => this.chain(new ZScanCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zscore\n   */\n  zscore = (key, member) => this.chain(new ZScoreCommand([key, member], this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zunionstore\n   */\n  zunionstore = (...args) => this.chain(new ZUnionStoreCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/zunion\n   */\n  zunion = (...args) => this.chain(new ZUnionCommand(args, this.commandOptions));\n  /**\n   * @see https://redis.io/commands/?group=json\n   */\n  get json() {\n    return {\n      /**\n       * @see https://redis.io/commands/json.arrappend\n       */\n      arrappend: (...args) => this.chain(new JsonArrAppendCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.arrindex\n       */\n      arrindex: (...args) => this.chain(new JsonArrIndexCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.arrinsert\n       */\n      arrinsert: (...args) => this.chain(new JsonArrInsertCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.arrlen\n       */\n      arrlen: (...args) => this.chain(new JsonArrLenCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.arrpop\n       */\n      arrpop: (...args) => this.chain(new JsonArrPopCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.arrtrim\n       */\n      arrtrim: (...args) => this.chain(new JsonArrTrimCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.clear\n       */\n      clear: (...args) => this.chain(new JsonClearCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.del\n       */\n      del: (...args) => this.chain(new JsonDelCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.forget\n       */\n      forget: (...args) => this.chain(new JsonForgetCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.get\n       */\n      get: (...args) => this.chain(new JsonGetCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.mget\n       */\n      mget: (...args) => this.chain(new JsonMGetCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.mset\n       */\n      mset: (...args) => this.chain(new JsonMSetCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.numincrby\n       */\n      numincrby: (...args) => this.chain(new JsonNumIncrByCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.nummultby\n       */\n      nummultby: (...args) => this.chain(new JsonNumMultByCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.objkeys\n       */\n      objkeys: (...args) => this.chain(new JsonObjKeysCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.objlen\n       */\n      objlen: (...args) => this.chain(new JsonObjLenCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.resp\n       */\n      resp: (...args) => this.chain(new JsonRespCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.set\n       */\n      set: (...args) => this.chain(new JsonSetCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.strappend\n       */\n      strappend: (...args) => this.chain(new JsonStrAppendCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.strlen\n       */\n      strlen: (...args) => this.chain(new JsonStrLenCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.toggle\n       */\n      toggle: (...args) => this.chain(new JsonToggleCommand(args, this.commandOptions)),\n      /**\n       * @see https://redis.io/commands/json.type\n       */\n      type: (...args) => this.chain(new JsonTypeCommand(args, this.commandOptions))\n    };\n  }\n};\n\n// pkg/auto-pipeline.ts\nfunction createAutoPipelineProxy(_redis, json) {\n  const redis = _redis;\n  if (!redis.autoPipelineExecutor) {\n    redis.autoPipelineExecutor = new AutoPipelineExecutor(redis);\n  }\n  return new Proxy(redis, {\n    get: (redis2, command) => {\n      if (command === \"pipelineCounter\") {\n        return redis2.autoPipelineExecutor.pipelineCounter;\n      }\n      if (command === \"json\") {\n        return createAutoPipelineProxy(redis2, true);\n      }\n      const commandInRedisButNotPipeline = command in redis2 && !(command in redis2.autoPipelineExecutor.pipeline);\n      if (commandInRedisButNotPipeline) {\n        return redis2[command];\n      }\n      const isFunction = json ? typeof redis2.autoPipelineExecutor.pipeline.json[command] === \"function\" : typeof redis2.autoPipelineExecutor.pipeline[command] === \"function\";\n      if (isFunction) {\n        return (...args) => {\n          return redis2.autoPipelineExecutor.withAutoPipeline((pipeline) => {\n            if (json) {\n              pipeline.json[command](\n                ...args\n              );\n            } else {\n              pipeline[command](...args);\n            }\n          });\n        };\n      }\n      return redis2.autoPipelineExecutor.pipeline[command];\n    }\n  });\n}\nvar AutoPipelineExecutor = class {\n  pipelinePromises = /* @__PURE__ */ new WeakMap();\n  activePipeline = null;\n  indexInCurrentPipeline = 0;\n  redis;\n  pipeline;\n  // only to make sure that proxy can work\n  pipelineCounter = 0;\n  // to keep track of how many times a pipeline was executed\n  constructor(redis) {\n    this.redis = redis;\n    this.pipeline = redis.pipeline();\n  }\n  async withAutoPipeline(executeWithPipeline) {\n    const pipeline = this.activePipeline ?? this.redis.pipeline();\n    if (!this.activePipeline) {\n      this.activePipeline = pipeline;\n      this.indexInCurrentPipeline = 0;\n    }\n    const index = this.indexInCurrentPipeline++;\n    executeWithPipeline(pipeline);\n    const pipelineDone = this.deferExecution().then(() => {\n      if (!this.pipelinePromises.has(pipeline)) {\n        const pipelinePromise = pipeline.exec({ keepErrors: true });\n        this.pipelineCounter += 1;\n        this.pipelinePromises.set(pipeline, pipelinePromise);\n        this.activePipeline = null;\n      }\n      return this.pipelinePromises.get(pipeline);\n    });\n    const results = await pipelineDone;\n    const commandResult = results[index];\n    if (commandResult.error) {\n      throw new UpstashError(`Command failed: ${commandResult.error}`);\n    }\n    return commandResult.result;\n  }\n  async deferExecution() {\n    await Promise.resolve();\n    await Promise.resolve();\n  }\n};\n\n// pkg/commands/psubscribe.ts\nvar PSubscribeCommand = class extends Command {\n  constructor(cmd, opts) {\n    const sseHeaders = {\n      Accept: \"text/event-stream\",\n      \"Cache-Control\": \"no-cache\",\n      Connection: \"keep-alive\"\n    };\n    super([], {\n      ...opts,\n      headers: sseHeaders,\n      path: [\"psubscribe\", ...cmd],\n      streamOptions: {\n        isStreaming: true,\n        onMessage: opts?.streamOptions?.onMessage,\n        signal: opts?.streamOptions?.signal\n      }\n    });\n  }\n};\n\n// pkg/commands/subscribe.ts\nvar Subscriber = class extends EventTarget {\n  subscriptions;\n  client;\n  listeners;\n  constructor(client, channels, isPattern = false) {\n    super();\n    this.client = client;\n    this.subscriptions = /* @__PURE__ */ new Map();\n    this.listeners = /* @__PURE__ */ new Map();\n    for (const channel of channels) {\n      if (isPattern) {\n        this.subscribeToPattern(channel);\n      } else {\n        this.subscribeToChannel(channel);\n      }\n    }\n  }\n  subscribeToChannel(channel) {\n    const controller = new AbortController();\n    const command = new SubscribeCommand([channel], {\n      streamOptions: {\n        signal: controller.signal,\n        onMessage: (data) => this.handleMessage(data, false)\n      }\n    });\n    command.exec(this.client).catch((error) => {\n      if (error.name !== \"AbortError\") {\n        this.dispatchToListeners(\"error\", error);\n      }\n    });\n    this.subscriptions.set(channel, {\n      command,\n      controller,\n      isPattern: false\n    });\n  }\n  subscribeToPattern(pattern) {\n    const controller = new AbortController();\n    const command = new PSubscribeCommand([pattern], {\n      streamOptions: {\n        signal: controller.signal,\n        onMessage: (data) => this.handleMessage(data, true)\n      }\n    });\n    command.exec(this.client).catch((error) => {\n      if (error.name !== \"AbortError\") {\n        this.dispatchToListeners(\"error\", error);\n      }\n    });\n    this.subscriptions.set(pattern, {\n      command,\n      controller,\n      isPattern: true\n    });\n  }\n  handleMessage(data, isPattern) {\n    const messageData = data.replace(/^data:\\s*/, \"\");\n    const firstCommaIndex = messageData.indexOf(\",\");\n    const secondCommaIndex = messageData.indexOf(\",\", firstCommaIndex + 1);\n    const thirdCommaIndex = isPattern ? messageData.indexOf(\",\", secondCommaIndex + 1) : -1;\n    if (firstCommaIndex !== -1 && secondCommaIndex !== -1) {\n      const type = messageData.slice(0, firstCommaIndex);\n      if (isPattern && type === \"pmessage\" && thirdCommaIndex !== -1) {\n        const pattern = messageData.slice(firstCommaIndex + 1, secondCommaIndex);\n        const channel = messageData.slice(secondCommaIndex + 1, thirdCommaIndex);\n        const messageStr = messageData.slice(thirdCommaIndex + 1);\n        try {\n          const message = JSON.parse(messageStr);\n          this.dispatchToListeners(\"pmessage\", { pattern, channel, message });\n          this.dispatchToListeners(`pmessage:${pattern}`, { pattern, channel, message });\n        } catch (error) {\n          this.dispatchToListeners(\"error\", new Error(`Failed to parse message: ${error}`));\n        }\n      } else {\n        const channel = messageData.slice(firstCommaIndex + 1, secondCommaIndex);\n        const messageStr = messageData.slice(secondCommaIndex + 1);\n        try {\n          if (type === \"subscribe\" || type === \"psubscribe\" || type === \"unsubscribe\" || type === \"punsubscribe\") {\n            const count = Number.parseInt(messageStr);\n            this.dispatchToListeners(type, count);\n          } else {\n            const message = JSON.parse(messageStr);\n            this.dispatchToListeners(type, { channel, message });\n            this.dispatchToListeners(`${type}:${channel}`, { channel, message });\n          }\n        } catch (error) {\n          this.dispatchToListeners(\"error\", new Error(`Failed to parse message: ${error}`));\n        }\n      }\n    }\n  }\n  dispatchToListeners(type, data) {\n    const listeners = this.listeners.get(type);\n    if (listeners) {\n      for (const listener of listeners) {\n        listener(data);\n      }\n    }\n  }\n  on(type, listener) {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, /* @__PURE__ */ new Set());\n    }\n    this.listeners.get(type)?.add(listener);\n  }\n  removeAllListeners() {\n    this.listeners.clear();\n  }\n  async unsubscribe(channels) {\n    if (channels) {\n      for (const channel of channels) {\n        const subscription = this.subscriptions.get(channel);\n        if (subscription) {\n          try {\n            subscription.controller.abort();\n          } catch {\n          }\n          this.subscriptions.delete(channel);\n        }\n      }\n    } else {\n      for (const subscription of this.subscriptions.values()) {\n        try {\n          subscription.controller.abort();\n        } catch {\n        }\n      }\n      this.subscriptions.clear();\n      this.removeAllListeners();\n    }\n  }\n  getSubscribedChannels() {\n    return [...this.subscriptions.keys()];\n  }\n};\nvar SubscribeCommand = class extends Command {\n  constructor(cmd, opts) {\n    const sseHeaders = {\n      Accept: \"text/event-stream\",\n      \"Cache-Control\": \"no-cache\",\n      Connection: \"keep-alive\"\n    };\n    super([], {\n      ...opts,\n      headers: sseHeaders,\n      path: [\"subscribe\", ...cmd],\n      streamOptions: {\n        isStreaming: true,\n        onMessage: opts?.streamOptions?.onMessage,\n        signal: opts?.streamOptions?.signal\n      }\n    });\n  }\n};\n\n// pkg/script.ts\n\n\nvar Script = class {\n  script;\n  sha1;\n  redis;\n  constructor(redis, script) {\n    this.redis = redis;\n    this.sha1 = this.digest(script);\n    this.script = script;\n  }\n  /**\n   * Send an `EVAL` command to redis.\n   */\n  async eval(keys, args) {\n    return await this.redis.eval(this.script, keys, args);\n  }\n  /**\n   * Calculates the sha1 hash of the script and then calls `EVALSHA`.\n   */\n  async evalsha(keys, args) {\n    return await this.redis.evalsha(this.sha1, keys, args);\n  }\n  /**\n   * Optimistically try to run `EVALSHA` first.\n   * If the script is not loaded in redis, it will fall back and try again with `EVAL`.\n   *\n   * Following calls will be able to use the cached script\n   */\n  async exec(keys, args) {\n    const res = await this.redis.evalsha(this.sha1, keys, args).catch(async (error) => {\n      if (error instanceof Error && error.message.toLowerCase().includes(\"noscript\")) {\n        return await this.redis.eval(this.script, keys, args);\n      }\n      throw error;\n    });\n    return res;\n  }\n  /**\n   * Compute the sha1 hash of the script and return its hex representation.\n   */\n  digest(s) {\n    return crypto_js_enc_hex_js__WEBPACK_IMPORTED_MODULE_0__.stringify(crypto_js_sha1_js__WEBPACK_IMPORTED_MODULE_1__(s));\n  }\n};\n\n// pkg/redis.ts\nvar Redis = class {\n  client;\n  opts;\n  enableTelemetry;\n  enableAutoPipelining;\n  /**\n   * Create a new redis client\n   *\n   * @example\n   * ```typescript\n   * const redis = new Redis({\n   *  url: \"<UPSTASH_REDIS_REST_URL>\",\n   *  token: \"<UPSTASH_REDIS_REST_TOKEN>\",\n   * });\n   * ```\n   */\n  constructor(client, opts) {\n    this.client = client;\n    this.opts = opts;\n    this.enableTelemetry = opts?.enableTelemetry ?? true;\n    if (opts?.readYourWrites === false) {\n      this.client.readYourWrites = false;\n    }\n    this.enableAutoPipelining = opts?.enableAutoPipelining ?? true;\n  }\n  get readYourWritesSyncToken() {\n    return this.client.upstashSyncToken;\n  }\n  set readYourWritesSyncToken(session) {\n    this.client.upstashSyncToken = session;\n  }\n  get json() {\n    return {\n      /**\n       * @see https://redis.io/commands/json.arrappend\n       */\n      arrappend: (...args) => new JsonArrAppendCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.arrindex\n       */\n      arrindex: (...args) => new JsonArrIndexCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.arrinsert\n       */\n      arrinsert: (...args) => new JsonArrInsertCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.arrlen\n       */\n      arrlen: (...args) => new JsonArrLenCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.arrpop\n       */\n      arrpop: (...args) => new JsonArrPopCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.arrtrim\n       */\n      arrtrim: (...args) => new JsonArrTrimCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.clear\n       */\n      clear: (...args) => new JsonClearCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.del\n       */\n      del: (...args) => new JsonDelCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.forget\n       */\n      forget: (...args) => new JsonForgetCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.get\n       */\n      get: (...args) => new JsonGetCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.mget\n       */\n      mget: (...args) => new JsonMGetCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.mset\n       */\n      mset: (...args) => new JsonMSetCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.numincrby\n       */\n      numincrby: (...args) => new JsonNumIncrByCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.nummultby\n       */\n      nummultby: (...args) => new JsonNumMultByCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.objkeys\n       */\n      objkeys: (...args) => new JsonObjKeysCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.objlen\n       */\n      objlen: (...args) => new JsonObjLenCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.resp\n       */\n      resp: (...args) => new JsonRespCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.set\n       */\n      set: (...args) => new JsonSetCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.strappend\n       */\n      strappend: (...args) => new JsonStrAppendCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.strlen\n       */\n      strlen: (...args) => new JsonStrLenCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.toggle\n       */\n      toggle: (...args) => new JsonToggleCommand(args, this.opts).exec(this.client),\n      /**\n       * @see https://redis.io/commands/json.type\n       */\n      type: (...args) => new JsonTypeCommand(args, this.opts).exec(this.client)\n    };\n  }\n  /**\n   * Wrap a new middleware around the HTTP client.\n   */\n  use = (middleware) => {\n    const makeRequest = this.client.request.bind(this.client);\n    this.client.request = (req) => middleware(req, makeRequest);\n  };\n  /**\n   * Technically this is not private, we can hide it from intellisense by doing this\n   */\n  addTelemetry = (telemetry) => {\n    if (!this.enableTelemetry) {\n      return;\n    }\n    try {\n      this.client.mergeTelemetry(telemetry);\n    } catch {\n    }\n  };\n  createScript(script) {\n    return new Script(this, script);\n  }\n  /**\n   * Create a new pipeline that allows you to send requests in bulk.\n   *\n   * @see {@link Pipeline}\n   */\n  pipeline = () => new Pipeline({\n    client: this.client,\n    commandOptions: this.opts,\n    multiExec: false\n  });\n  autoPipeline = () => {\n    return createAutoPipelineProxy(this);\n  };\n  /**\n   * Create a new transaction to allow executing multiple steps atomically.\n   *\n   * All the commands in a transaction are serialized and executed sequentially. A request sent by\n   * another client will never be served in the middle of the execution of a Redis Transaction. This\n   * guarantees that the commands are executed as a single isolated operation.\n   *\n   * @see {@link Pipeline}\n   */\n  multi = () => new Pipeline({\n    client: this.client,\n    commandOptions: this.opts,\n    multiExec: true\n  });\n  /**\n   * Returns an instance that can be used to execute `BITFIELD` commands on one key.\n   *\n   * @example\n   * ```typescript\n   * redis.set(\"mykey\", 0);\n   * const result = await redis.bitfield(\"mykey\")\n   *   .set(\"u4\", 0, 16)\n   *   .incr(\"u4\", \"#1\", 1)\n   *   .exec();\n   * console.log(result); // [0, 1]\n   * ```\n   *\n   * @see https://redis.io/commands/bitfield\n   */\n  bitfield = (...args) => new BitFieldCommand(args, this.client, this.opts);\n  /**\n   * @see https://redis.io/commands/append\n   */\n  append = (...args) => new AppendCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/bitcount\n   */\n  bitcount = (...args) => new BitCountCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/bitop\n   */\n  bitop = (op, destinationKey, sourceKey, ...sourceKeys) => new BitOpCommand([op, destinationKey, sourceKey, ...sourceKeys], this.opts).exec(\n    this.client\n  );\n  /**\n   * @see https://redis.io/commands/bitpos\n   */\n  bitpos = (...args) => new BitPosCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/copy\n   */\n  copy = (...args) => new CopyCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/dbsize\n   */\n  dbsize = () => new DBSizeCommand(this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/decr\n   */\n  decr = (...args) => new DecrCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/decrby\n   */\n  decrby = (...args) => new DecrByCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/del\n   */\n  del = (...args) => new DelCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/echo\n   */\n  echo = (...args) => new EchoCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/eval\n   */\n  eval = (...args) => new EvalCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/evalsha\n   */\n  evalsha = (...args) => new EvalshaCommand(args, this.opts).exec(this.client);\n  /**\n   * Generic method to execute any Redis command.\n   */\n  exec = (args) => new ExecCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/exists\n   */\n  exists = (...args) => new ExistsCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/expire\n   */\n  expire = (...args) => new ExpireCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/expireat\n   */\n  expireat = (...args) => new ExpireAtCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/flushall\n   */\n  flushall = (args) => new FlushAllCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/flushdb\n   */\n  flushdb = (...args) => new FlushDBCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/geoadd\n   */\n  geoadd = (...args) => new GeoAddCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/geopos\n   */\n  geopos = (...args) => new GeoPosCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/geodist\n   */\n  geodist = (...args) => new GeoDistCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/geohash\n   */\n  geohash = (...args) => new GeoHashCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/geosearch\n   */\n  geosearch = (...args) => new GeoSearchCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/geosearchstore\n   */\n  geosearchstore = (...args) => new GeoSearchStoreCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/get\n   */\n  get = (...args) => new GetCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/getbit\n   */\n  getbit = (...args) => new GetBitCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/getdel\n   */\n  getdel = (...args) => new GetDelCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/getex\n   */\n  getex = (...args) => new GetExCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/getrange\n   */\n  getrange = (...args) => new GetRangeCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/getset\n   */\n  getset = (key, value) => new GetSetCommand([key, value], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hdel\n   */\n  hdel = (...args) => new HDelCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hexists\n   */\n  hexists = (...args) => new HExistsCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hget\n   */\n  hget = (...args) => new HGetCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hgetall\n   */\n  hgetall = (...args) => new HGetAllCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hincrby\n   */\n  hincrby = (...args) => new HIncrByCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hincrbyfloat\n   */\n  hincrbyfloat = (...args) => new HIncrByFloatCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hkeys\n   */\n  hkeys = (...args) => new HKeysCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hlen\n   */\n  hlen = (...args) => new HLenCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hmget\n   */\n  hmget = (...args) => new HMGetCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hmset\n   */\n  hmset = (key, kv) => new HMSetCommand([key, kv], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hrandfield\n   */\n  hrandfield = (key, count, withValues) => new HRandFieldCommand([key, count, withValues], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hscan\n   */\n  hscan = (...args) => new HScanCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hset\n   */\n  hset = (key, kv) => new HSetCommand([key, kv], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hsetnx\n   */\n  hsetnx = (key, field, value) => new HSetNXCommand([key, field, value], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hstrlen\n   */\n  hstrlen = (...args) => new HStrLenCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/hvals\n   */\n  hvals = (...args) => new HValsCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/incr\n   */\n  incr = (...args) => new IncrCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/incrby\n   */\n  incrby = (...args) => new IncrByCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/incrbyfloat\n   */\n  incrbyfloat = (...args) => new IncrByFloatCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/keys\n   */\n  keys = (...args) => new KeysCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lindex\n   */\n  lindex = (...args) => new LIndexCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/linsert\n   */\n  linsert = (key, direction, pivot, value) => new LInsertCommand([key, direction, pivot, value], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/llen\n   */\n  llen = (...args) => new LLenCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lmove\n   */\n  lmove = (...args) => new LMoveCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lpop\n   */\n  lpop = (...args) => new LPopCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lmpop\n   */\n  lmpop = (...args) => new LmPopCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lpos\n   */\n  lpos = (...args) => new LPosCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lpush\n   */\n  lpush = (key, ...elements) => new LPushCommand([key, ...elements], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lpushx\n   */\n  lpushx = (key, ...elements) => new LPushXCommand([key, ...elements], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lrange\n   */\n  lrange = (...args) => new LRangeCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lrem\n   */\n  lrem = (key, count, value) => new LRemCommand([key, count, value], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/lset\n   */\n  lset = (key, index, value) => new LSetCommand([key, index, value], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/ltrim\n   */\n  ltrim = (...args) => new LTrimCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/mget\n   */\n  mget = (...args) => new MGetCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/mset\n   */\n  mset = (kv) => new MSetCommand([kv], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/msetnx\n   */\n  msetnx = (kv) => new MSetNXCommand([kv], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/persist\n   */\n  persist = (...args) => new PersistCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/pexpire\n   */\n  pexpire = (...args) => new PExpireCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/pexpireat\n   */\n  pexpireat = (...args) => new PExpireAtCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/pfadd\n   */\n  pfadd = (...args) => new PfAddCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/pfcount\n   */\n  pfcount = (...args) => new PfCountCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/pfmerge\n   */\n  pfmerge = (...args) => new PfMergeCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/ping\n   */\n  ping = (args) => new PingCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/psetex\n   */\n  psetex = (key, ttl, value) => new PSetEXCommand([key, ttl, value], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/psubscribe\n   */\n  psubscribe = (patterns) => {\n    const patternArray = Array.isArray(patterns) ? patterns : [patterns];\n    return new Subscriber(this.client, patternArray, true);\n  };\n  /**\n   * @see https://redis.io/commands/pttl\n   */\n  pttl = (...args) => new PTtlCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/publish\n   */\n  publish = (...args) => new PublishCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/randomkey\n   */\n  randomkey = () => new RandomKeyCommand().exec(this.client);\n  /**\n   * @see https://redis.io/commands/rename\n   */\n  rename = (...args) => new RenameCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/renamenx\n   */\n  renamenx = (...args) => new RenameNXCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/rpop\n   */\n  rpop = (...args) => new RPopCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/rpush\n   */\n  rpush = (key, ...elements) => new RPushCommand([key, ...elements], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/rpushx\n   */\n  rpushx = (key, ...elements) => new RPushXCommand([key, ...elements], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/sadd\n   */\n  sadd = (key, member, ...members) => new SAddCommand([key, member, ...members], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/scan\n   */\n  scan = (...args) => new ScanCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/scard\n   */\n  scard = (...args) => new SCardCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/script-exists\n   */\n  scriptExists = (...args) => new ScriptExistsCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/script-flush\n   */\n  scriptFlush = (...args) => new ScriptFlushCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/script-load\n   */\n  scriptLoad = (...args) => new ScriptLoadCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/sdiff\n   */\n  sdiff = (...args) => new SDiffCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/sdiffstore\n   */\n  sdiffstore = (...args) => new SDiffStoreCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/set\n   */\n  set = (key, value, opts) => new SetCommand([key, value, opts], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/setbit\n   */\n  setbit = (...args) => new SetBitCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/setex\n   */\n  setex = (key, ttl, value) => new SetExCommand([key, ttl, value], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/setnx\n   */\n  setnx = (key, value) => new SetNxCommand([key, value], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/setrange\n   */\n  setrange = (...args) => new SetRangeCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/sinter\n   */\n  sinter = (...args) => new SInterCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/sinterstore\n   */\n  sinterstore = (...args) => new SInterStoreCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/sismember\n   */\n  sismember = (key, member) => new SIsMemberCommand([key, member], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/smismember\n   */\n  smismember = (key, members) => new SMIsMemberCommand([key, members], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/smembers\n   */\n  smembers = (...args) => new SMembersCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/smove\n   */\n  smove = (source, destination, member) => new SMoveCommand([source, destination, member], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/spop\n   */\n  spop = (...args) => new SPopCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/srandmember\n   */\n  srandmember = (...args) => new SRandMemberCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/srem\n   */\n  srem = (key, ...members) => new SRemCommand([key, ...members], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/sscan\n   */\n  sscan = (...args) => new SScanCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/strlen\n   */\n  strlen = (...args) => new StrLenCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/subscribe\n   */\n  subscribe = (channels) => {\n    const channelArray = Array.isArray(channels) ? channels : [channels];\n    return new Subscriber(this.client, channelArray);\n  };\n  /**\n   * @see https://redis.io/commands/sunion\n   */\n  sunion = (...args) => new SUnionCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/sunionstore\n   */\n  sunionstore = (...args) => new SUnionStoreCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/time\n   */\n  time = () => new TimeCommand().exec(this.client);\n  /**\n   * @see https://redis.io/commands/touch\n   */\n  touch = (...args) => new TouchCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/ttl\n   */\n  ttl = (...args) => new TtlCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/type\n   */\n  type = (...args) => new TypeCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/unlink\n   */\n  unlink = (...args) => new UnlinkCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xadd\n   */\n  xadd = (...args) => new XAddCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xack\n   */\n  xack = (...args) => new XAckCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xdel\n   */\n  xdel = (...args) => new XDelCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xgroup\n   */\n  xgroup = (...args) => new XGroupCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xread\n   */\n  xread = (...args) => new XReadCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xreadgroup\n   */\n  xreadgroup = (...args) => new XReadGroupCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xinfo\n   */\n  xinfo = (...args) => new XInfoCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xlen\n   */\n  xlen = (...args) => new XLenCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xpending\n   */\n  xpending = (...args) => new XPendingCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xclaim\n   */\n  xclaim = (...args) => new XClaimCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xautoclaim\n   */\n  xautoclaim = (...args) => new XAutoClaim(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xtrim\n   */\n  xtrim = (...args) => new XTrimCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xrange\n   */\n  xrange = (...args) => new XRangeCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/xrevrange\n   */\n  xrevrange = (...args) => new XRevRangeCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zadd\n   */\n  zadd = (...args) => {\n    if (\"score\" in args[1]) {\n      return new ZAddCommand([args[0], args[1], ...args.slice(2)], this.opts).exec(\n        this.client\n      );\n    }\n    return new ZAddCommand(\n      [args[0], args[1], ...args.slice(2)],\n      this.opts\n    ).exec(this.client);\n  };\n  /**\n   * @see https://redis.io/commands/zcard\n   */\n  zcard = (...args) => new ZCardCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zcount\n   */\n  zcount = (...args) => new ZCountCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zdiffstore\n   */\n  zdiffstore = (...args) => new ZDiffStoreCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zincrby\n   */\n  zincrby = (key, increment, member) => new ZIncrByCommand([key, increment, member], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zinterstore\n   */\n  zinterstore = (...args) => new ZInterStoreCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zlexcount\n   */\n  zlexcount = (...args) => new ZLexCountCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zmscore\n   */\n  zmscore = (...args) => new ZMScoreCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zpopmax\n   */\n  zpopmax = (...args) => new ZPopMaxCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zpopmin\n   */\n  zpopmin = (...args) => new ZPopMinCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zrange\n   */\n  zrange = (...args) => new ZRangeCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zrank\n   */\n  zrank = (key, member) => new ZRankCommand([key, member], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zrem\n   */\n  zrem = (key, ...members) => new ZRemCommand([key, ...members], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zremrangebylex\n   */\n  zremrangebylex = (...args) => new ZRemRangeByLexCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zremrangebyrank\n   */\n  zremrangebyrank = (...args) => new ZRemRangeByRankCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zremrangebyscore\n   */\n  zremrangebyscore = (...args) => new ZRemRangeByScoreCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zrevrank\n   */\n  zrevrank = (key, member) => new ZRevRankCommand([key, member], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zscan\n   */\n  zscan = (...args) => new ZScanCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zscore\n   */\n  zscore = (key, member) => new ZScoreCommand([key, member], this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zunion\n   */\n  zunion = (...args) => new ZUnionCommand(args, this.opts).exec(this.client);\n  /**\n   * @see https://redis.io/commands/zunionstore\n   */\n  zunionstore = (...args) => new ZUnionStoreCommand(args, this.opts).exec(this.client);\n};\n\n// version.ts\nvar VERSION = \"v1.34.6\";\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@upstash/redis/chunk-56TVFNIH.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@upstash/redis/nodejs.mjs":
/*!************************************************!*\
  !*** ./node_modules/@upstash/redis/nodejs.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Redis: () => (/* binding */ Redis2),\n/* harmony export */   errors: () => (/* reexport safe */ _chunk_56TVFNIH_mjs__WEBPACK_IMPORTED_MODULE_0__.error_exports)\n/* harmony export */ });\n/* harmony import */ var _chunk_56TVFNIH_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-56TVFNIH.mjs */ \"(rsc)/./node_modules/@upstash/redis/chunk-56TVFNIH.mjs\");\n\n\n// platforms/nodejs.ts\nif (typeof atob === \"undefined\") {\n  global.atob = (b64) => Buffer.from(b64, \"base64\").toString(\"utf8\");\n}\nvar Redis2 = class _Redis extends _chunk_56TVFNIH_mjs__WEBPACK_IMPORTED_MODULE_0__.Redis {\n  /**\n   * Create a new redis client by providing a custom `Requester` implementation\n   *\n   * @example\n   * ```ts\n   *\n   * import { UpstashRequest, Requester, UpstashResponse, Redis } from \"@upstash/redis\"\n   *\n   *  const requester: Requester = {\n   *    request: <TResult>(req: UpstashRequest): Promise<UpstashResponse<TResult>> => {\n   *      // ...\n   *    }\n   *  }\n   *\n   * const redis = new Redis(requester)\n   * ```\n   */\n  constructor(configOrRequester) {\n    if (\"request\" in configOrRequester) {\n      super(configOrRequester);\n      return;\n    }\n    if (!configOrRequester.url) {\n      console.warn(\n        `[Upstash Redis] The 'url' property is missing or undefined in your Redis config.`\n      );\n    } else if (configOrRequester.url.startsWith(\" \") || configOrRequester.url.endsWith(\" \") || /\\r|\\n/.test(configOrRequester.url)) {\n      console.warn(\n        \"[Upstash Redis] The redis url contains whitespace or newline, which can cause errors!\"\n      );\n    }\n    if (!configOrRequester.token) {\n      console.warn(\n        `[Upstash Redis] The 'token' property is missing or undefined in your Redis config.`\n      );\n    } else if (configOrRequester.token.startsWith(\" \") || configOrRequester.token.endsWith(\" \") || /\\r|\\n/.test(configOrRequester.token)) {\n      console.warn(\n        \"[Upstash Redis] The redis token contains whitespace or newline, which can cause errors!\"\n      );\n    }\n    const client = new _chunk_56TVFNIH_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpClient({\n      baseUrl: configOrRequester.url,\n      retry: configOrRequester.retry,\n      headers: { authorization: `Bearer ${configOrRequester.token}` },\n      agent: configOrRequester.agent,\n      responseEncoding: configOrRequester.responseEncoding,\n      cache: configOrRequester.cache ?? \"no-store\",\n      signal: configOrRequester.signal,\n      keepAlive: configOrRequester.keepAlive,\n      readYourWrites: configOrRequester.readYourWrites\n    });\n    super(client, {\n      automaticDeserialization: configOrRequester.automaticDeserialization,\n      enableTelemetry: !process.env.UPSTASH_DISABLE_TELEMETRY,\n      latencyLogging: configOrRequester.latencyLogging,\n      enableAutoPipelining: configOrRequester.enableAutoPipelining\n    });\n    this.addTelemetry({\n      runtime: (\n        // @ts-expect-error to silence compiler\n        typeof EdgeRuntime === \"string\" ? \"edge-light\" : `node@${process.version}`\n      ),\n      platform: process.env.VERCEL ? \"vercel\" : process.env.AWS_REGION ? \"aws\" : \"unknown\",\n      sdk: `@upstash/redis@${_chunk_56TVFNIH_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION}`\n    });\n    if (this.enableAutoPipelining) {\n      return this.autoPipeline();\n    }\n  }\n  /**\n   * Create a new Upstash Redis instance from environment variables.\n   *\n   * Use this to automatically load connection secrets from your environment\n   * variables. For instance when using the Vercel integration.\n   *\n   * This tries to load `UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN` from\n   * your environment using `process.env`.\n   */\n  static fromEnv(config) {\n    if (process.env === void 0) {\n      throw new TypeError(\n        '[Upstash Redis] Unable to get environment variables, `process.env` is undefined. If you are deploying to cloudflare, please import from \"@upstash/redis/cloudflare\" instead'\n      );\n    }\n    const url = process.env.UPSTASH_REDIS_REST_URL || process.env.KV_REST_API_URL;\n    if (!url) {\n      console.warn(\"[Upstash Redis] Unable to find environment variable: `UPSTASH_REDIS_REST_URL`\");\n    }\n    const token = process.env.UPSTASH_REDIS_REST_TOKEN || process.env.KV_REST_API_TOKEN;\n    if (!token) {\n      console.warn(\n        \"[Upstash Redis] Unable to find environment variable: `UPSTASH_REDIS_REST_TOKEN`\"\n      );\n    }\n    return new _Redis({ ...config, url, token });\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHVwc3Rhc2gvcmVkaXMvbm9kZWpzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFLOEI7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHNEQUFLO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0RBQW9EO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkRBQVU7QUFDakM7QUFDQTtBQUNBLGlCQUFpQix5QkFBeUIsd0JBQXdCLEdBQUc7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLGdCQUFnQjtBQUNqRjtBQUNBO0FBQ0EsNkJBQTZCLHdEQUFPLENBQUM7QUFDckMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFJRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxiaWczZFxcT25lRHJpdmVcXERlc2t0b3BcXGNvZGVzXFxEaWFtb25kSGFja3MyNVxcZnJvbnRlbmRcXG5vZGVfbW9kdWxlc1xcQHVwc3Rhc2hcXHJlZGlzXFxub2RlanMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEh0dHBDbGllbnQsXG4gIFJlZGlzLFxuICBWRVJTSU9OLFxuICBlcnJvcl9leHBvcnRzXG59IGZyb20gXCIuL2NodW5rLTU2VFZGTklILm1qc1wiO1xuXG4vLyBwbGF0Zm9ybXMvbm9kZWpzLnRzXG5pZiAodHlwZW9mIGF0b2IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZ2xvYmFsLmF0b2IgPSAoYjY0KSA9PiBCdWZmZXIuZnJvbShiNjQsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwidXRmOFwiKTtcbn1cbnZhciBSZWRpczIgPSBjbGFzcyBfUmVkaXMgZXh0ZW5kcyBSZWRpcyB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcmVkaXMgY2xpZW50IGJ5IHByb3ZpZGluZyBhIGN1c3RvbSBgUmVxdWVzdGVyYCBpbXBsZW1lbnRhdGlvblxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKlxuICAgKiBpbXBvcnQgeyBVcHN0YXNoUmVxdWVzdCwgUmVxdWVzdGVyLCBVcHN0YXNoUmVzcG9uc2UsIFJlZGlzIH0gZnJvbSBcIkB1cHN0YXNoL3JlZGlzXCJcbiAgICpcbiAgICogIGNvbnN0IHJlcXVlc3RlcjogUmVxdWVzdGVyID0ge1xuICAgKiAgICByZXF1ZXN0OiA8VFJlc3VsdD4ocmVxOiBVcHN0YXNoUmVxdWVzdCk6IFByb21pc2U8VXBzdGFzaFJlc3BvbnNlPFRSZXN1bHQ+PiA9PiB7XG4gICAqICAgICAgLy8gLi4uXG4gICAqICAgIH1cbiAgICogIH1cbiAgICpcbiAgICogY29uc3QgcmVkaXMgPSBuZXcgUmVkaXMocmVxdWVzdGVyKVxuICAgKiBgYGBcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZ09yUmVxdWVzdGVyKSB7XG4gICAgaWYgKFwicmVxdWVzdFwiIGluIGNvbmZpZ09yUmVxdWVzdGVyKSB7XG4gICAgICBzdXBlcihjb25maWdPclJlcXVlc3Rlcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghY29uZmlnT3JSZXF1ZXN0ZXIudXJsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBbVXBzdGFzaCBSZWRpc10gVGhlICd1cmwnIHByb3BlcnR5IGlzIG1pc3Npbmcgb3IgdW5kZWZpbmVkIGluIHlvdXIgUmVkaXMgY29uZmlnLmBcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChjb25maWdPclJlcXVlc3Rlci51cmwuc3RhcnRzV2l0aChcIiBcIikgfHwgY29uZmlnT3JSZXF1ZXN0ZXIudXJsLmVuZHNXaXRoKFwiIFwiKSB8fCAvXFxyfFxcbi8udGVzdChjb25maWdPclJlcXVlc3Rlci51cmwpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiW1Vwc3Rhc2ggUmVkaXNdIFRoZSByZWRpcyB1cmwgY29udGFpbnMgd2hpdGVzcGFjZSBvciBuZXdsaW5lLCB3aGljaCBjYW4gY2F1c2UgZXJyb3JzIVwiXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmZpZ09yUmVxdWVzdGVyLnRva2VuKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBbVXBzdGFzaCBSZWRpc10gVGhlICd0b2tlbicgcHJvcGVydHkgaXMgbWlzc2luZyBvciB1bmRlZmluZWQgaW4geW91ciBSZWRpcyBjb25maWcuYFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZ09yUmVxdWVzdGVyLnRva2VuLnN0YXJ0c1dpdGgoXCIgXCIpIHx8IGNvbmZpZ09yUmVxdWVzdGVyLnRva2VuLmVuZHNXaXRoKFwiIFwiKSB8fCAvXFxyfFxcbi8udGVzdChjb25maWdPclJlcXVlc3Rlci50b2tlbikpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJbVXBzdGFzaCBSZWRpc10gVGhlIHJlZGlzIHRva2VuIGNvbnRhaW5zIHdoaXRlc3BhY2Ugb3IgbmV3bGluZSwgd2hpY2ggY2FuIGNhdXNlIGVycm9ycyFcIlxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoe1xuICAgICAgYmFzZVVybDogY29uZmlnT3JSZXF1ZXN0ZXIudXJsLFxuICAgICAgcmV0cnk6IGNvbmZpZ09yUmVxdWVzdGVyLnJldHJ5LFxuICAgICAgaGVhZGVyczogeyBhdXRob3JpemF0aW9uOiBgQmVhcmVyICR7Y29uZmlnT3JSZXF1ZXN0ZXIudG9rZW59YCB9LFxuICAgICAgYWdlbnQ6IGNvbmZpZ09yUmVxdWVzdGVyLmFnZW50LFxuICAgICAgcmVzcG9uc2VFbmNvZGluZzogY29uZmlnT3JSZXF1ZXN0ZXIucmVzcG9uc2VFbmNvZGluZyxcbiAgICAgIGNhY2hlOiBjb25maWdPclJlcXVlc3Rlci5jYWNoZSA/PyBcIm5vLXN0b3JlXCIsXG4gICAgICBzaWduYWw6IGNvbmZpZ09yUmVxdWVzdGVyLnNpZ25hbCxcbiAgICAgIGtlZXBBbGl2ZTogY29uZmlnT3JSZXF1ZXN0ZXIua2VlcEFsaXZlLFxuICAgICAgcmVhZFlvdXJXcml0ZXM6IGNvbmZpZ09yUmVxdWVzdGVyLnJlYWRZb3VyV3JpdGVzXG4gICAgfSk7XG4gICAgc3VwZXIoY2xpZW50LCB7XG4gICAgICBhdXRvbWF0aWNEZXNlcmlhbGl6YXRpb246IGNvbmZpZ09yUmVxdWVzdGVyLmF1dG9tYXRpY0Rlc2VyaWFsaXphdGlvbixcbiAgICAgIGVuYWJsZVRlbGVtZXRyeTogIXByb2Nlc3MuZW52LlVQU1RBU0hfRElTQUJMRV9URUxFTUVUUlksXG4gICAgICBsYXRlbmN5TG9nZ2luZzogY29uZmlnT3JSZXF1ZXN0ZXIubGF0ZW5jeUxvZ2dpbmcsXG4gICAgICBlbmFibGVBdXRvUGlwZWxpbmluZzogY29uZmlnT3JSZXF1ZXN0ZXIuZW5hYmxlQXV0b1BpcGVsaW5pbmdcbiAgICB9KTtcbiAgICB0aGlzLmFkZFRlbGVtZXRyeSh7XG4gICAgICBydW50aW1lOiAoXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdG8gc2lsZW5jZSBjb21waWxlclxuICAgICAgICB0eXBlb2YgRWRnZVJ1bnRpbWUgPT09IFwic3RyaW5nXCIgPyBcImVkZ2UtbGlnaHRcIiA6IGBub2RlQCR7cHJvY2Vzcy52ZXJzaW9ufWBcbiAgICAgICksXG4gICAgICBwbGF0Zm9ybTogcHJvY2Vzcy5lbnYuVkVSQ0VMID8gXCJ2ZXJjZWxcIiA6IHByb2Nlc3MuZW52LkFXU19SRUdJT04gPyBcImF3c1wiIDogXCJ1bmtub3duXCIsXG4gICAgICBzZGs6IGBAdXBzdGFzaC9yZWRpc0Ake1ZFUlNJT059YFxuICAgIH0pO1xuICAgIGlmICh0aGlzLmVuYWJsZUF1dG9QaXBlbGluaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdXRvUGlwZWxpbmUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBVcHN0YXNoIFJlZGlzIGluc3RhbmNlIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICAgKlxuICAgKiBVc2UgdGhpcyB0byBhdXRvbWF0aWNhbGx5IGxvYWQgY29ubmVjdGlvbiBzZWNyZXRzIGZyb20geW91ciBlbnZpcm9ubWVudFxuICAgKiB2YXJpYWJsZXMuIEZvciBpbnN0YW5jZSB3aGVuIHVzaW5nIHRoZSBWZXJjZWwgaW50ZWdyYXRpb24uXG4gICAqXG4gICAqIFRoaXMgdHJpZXMgdG8gbG9hZCBgVVBTVEFTSF9SRURJU19SRVNUX1VSTGAgYW5kIGBVUFNUQVNIX1JFRElTX1JFU1RfVE9LRU5gIGZyb21cbiAgICogeW91ciBlbnZpcm9ubWVudCB1c2luZyBgcHJvY2Vzcy5lbnZgLlxuICAgKi9cbiAgc3RhdGljIGZyb21FbnYoY29uZmlnKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52ID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdbVXBzdGFzaCBSZWRpc10gVW5hYmxlIHRvIGdldCBlbnZpcm9ubWVudCB2YXJpYWJsZXMsIGBwcm9jZXNzLmVudmAgaXMgdW5kZWZpbmVkLiBJZiB5b3UgYXJlIGRlcGxveWluZyB0byBjbG91ZGZsYXJlLCBwbGVhc2UgaW1wb3J0IGZyb20gXCJAdXBzdGFzaC9yZWRpcy9jbG91ZGZsYXJlXCIgaW5zdGVhZCdcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IHByb2Nlc3MuZW52LlVQU1RBU0hfUkVESVNfUkVTVF9VUkwgfHwgcHJvY2Vzcy5lbnYuS1ZfUkVTVF9BUElfVVJMO1xuICAgIGlmICghdXJsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVXBzdGFzaCBSZWRpc10gVW5hYmxlIHRvIGZpbmQgZW52aXJvbm1lbnQgdmFyaWFibGU6IGBVUFNUQVNIX1JFRElTX1JFU1RfVVJMYFwiKTtcbiAgICB9XG4gICAgY29uc3QgdG9rZW4gPSBwcm9jZXNzLmVudi5VUFNUQVNIX1JFRElTX1JFU1RfVE9LRU4gfHwgcHJvY2Vzcy5lbnYuS1ZfUkVTVF9BUElfVE9LRU47XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIltVcHN0YXNoIFJlZGlzXSBVbmFibGUgdG8gZmluZCBlbnZpcm9ubWVudCB2YXJpYWJsZTogYFVQU1RBU0hfUkVESVNfUkVTVF9UT0tFTmBcIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfUmVkaXMoeyAuLi5jb25maWcsIHVybCwgdG9rZW4gfSk7XG4gIH1cbn07XG5leHBvcnQge1xuICBSZWRpczIgYXMgUmVkaXMsXG4gIGVycm9yX2V4cG9ydHMgYXMgZXJyb3JzXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@upstash/redis/nodejs.mjs\n");

/***/ })

};
;